<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SuperGMS</name>
    </assembly>
    <members>
        <member name="T:SuperGMS.ApiHelper.ApiClassInfo">
            <summary>
            api类信息
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ApiClassInfo.UdfModel">
            <summary>
            是否定义了属性 UdfModel
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.ApiClassInfo.GetFieldDesc(SuperGMS.ApiHelper.ApiClassInfo,System.Collections.Generic.List{SuperGMS.ApiHelper.FieldDescInfo},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            eg:*必输字段,【shippingorderid】,字符串类型,出库单ID
            </summary>
            <param name="name"></param>
            <param name="cInfo"></param>
            <param name="fInfo"></param>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.ApiHelper.ApiPropertyType">
            <summary>
            属性json类型
            </summary>
        </member>
        <member name="F:SuperGMS.ApiHelper.ApiPropertyType.SimpleObject">
            <summary>
            简单类型
            </summary>
        </member>
        <member name="F:SuperGMS.ApiHelper.ApiPropertyType.ClassObject">
            <summary>
            类
            </summary>
        </member>
        <member name="F:SuperGMS.ApiHelper.ApiPropertyType.ArrayObject">
            <summary>
            数组
            </summary>
        </member>
        <member name="T:SuperGMS.ApiHelper.ApiHelper">
            <summary>
            api帮助类
            </summary>
        </member>
        <member name="F:SuperGMS.ApiHelper.ApiHelper.RpcBaseName">
            <summary>
            RPC 基类
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.ApiHelper.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.ApiHelper.ApiHelper"/> class.
            根据程序集搜集 所有相关的接口帮助
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:SuperGMS.ApiHelper.ApiHelper.GetAllInterface(System.Boolean)">
            <summary>
            查找所有的App
            </summary>
            <returns>所有app</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.ApiHelper.GetAllInterfaceClass">
            <summary>
            查找所有的 GrantRpcBaseServer 继承类
            </summary>
            <returns>所有的 GrantRpcBaseServer 继承类</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.ApiHelper.GetAllInterfaceClass(System.String,System.Boolean)">
            <summary>
            接口信息
            </summary>
            <param name="lang"></param>
            <param name="bOpenApi"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.ApiHelper.GetApiInfoByType(System.Type)">
            <summary>
            获取类信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.ApiHelper.ToJson(System.Type,System.Boolean)">
            <summary>
            获取json描述 ,有嵌套引用的忽略第二个及以后
            </summary>
            <param name="type">给定类型</param>
            <param name="original">是否已经替换非字符串类型，默认不替换</param>
            <returns>json实例</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.ApiHelper.GetInterfaceInfo(System.Type,System.Type,System.String)">
            <summary>
            得到接口信息 文档
            </summary>
            <param name="type">接口类</param>
            <param name="argType">接口参数类</param>
            <returns>文档信息</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.ApiHelper.GetParseAllXml">
            <summary>
            解析xml文档
            </summary>
            <returns>xml注释集合</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.ApiHelper.GetAllErrorCodeClass">
            <summary>
            收集错误代码 枚举类定义
            </summary>
            <returns>错误代码定义类</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.ApiHelper.GetEnumCodeDescription(System.Type)">
            <summary>
            得到枚举类型的CodeDesc属性标签
            </summary>
            <param name="enumType">枚举值类型</param>
            <returns>按接口分组的属性标签</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.ApiHelper.GetInterfaceParam(System.Type)">
            <summary>
            查找 GrantRpcBaseServer 继承类的输入和输出参数类型
            </summary>
            <param name="type">GrantRpcBaseServer 继承类</param>
            <returns>得到接口的参数和接口类型</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.ApiHelper.GetGrantRpcBaseServerClassType(System.Type)">
            <summary>
            判断是否Rpc接口类
            </summary>
            <param name="type">本微服务中的类型</param>
            <returns>是否Rpc接口类</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.ApiHelper.IsGrantRpcBaseServerChildClass(System.Type)">
            <summary>
            判断是否Rpc接口类
            </summary>
            <param name="type">本微服务中的类型</param>
            <returns>是否Rpc接口类</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.ApiHelper.GetXmlDllPath">
            <summary>
            微服务帮助的全路径
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.ApiHelper.GetAllXml">
            <summary>
            微服务帮助的全路径
            </summary>
            <returns>xml集合</returns>
        </member>
        <member name="T:SuperGMS.ApiHelper.BaseGetApiHelp">
            <summary>
            得到微服务接口列表帮助信息
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.BaseGetApiHelp.Assembly">
            <summary>
            Gets 需实现的属性
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.BaseGetApiHelp.Process(SuperGMS.Rpc.Nullables,SuperGMS.Protocol.RpcProtocol.StatusCode@)">
            <summary>
            GetAddress接口实现
            </summary>
            <param name="valueArgs">传入参数</param>
            <param name="code">传出状态码</param>
            <returns>接口返回值</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.BaseGetApiHelp.Check(SuperGMS.Rpc.Nullables,SuperGMS.Protocol.RpcProtocol.StatusCode@)">
            <summary>
            Check
            </summary>
            <param name="args">args</param>
            <param name="code">code</param>
            <returns>bool</returns>
        </member>
        <member name="T:SuperGMS.ApiHelper.BaseGetInfo">
            <summary>
            得到微服务接口列表帮助信息
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.BaseGetInfo.Process(SuperGMS.Rpc.Nullables,SuperGMS.Protocol.RpcProtocol.StatusCode@)">
            <summary>
            GetAddress接口实现
            </summary>
            <param name="valueArgs">传入参数</param>
            <param name="code">传出状态码</param>
            <returns>接口返回值</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.BaseGetInfo.Check(SuperGMS.Rpc.Nullables,SuperGMS.Protocol.RpcProtocol.StatusCode@)">
            <summary>
            Check
            </summary>
            <param name="args">args</param>
            <param name="code">code</param>
            <returns>bool</returns>
        </member>
        <member name="T:SuperGMS.ApiHelper.BaseGetLastError">
            <summary>
            得到微服务接口列表帮助信息
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.BaseGetLastError.Process(SuperGMS.Rpc.Nullables,SuperGMS.Protocol.RpcProtocol.StatusCode@)">
            <summary>
            GetAddress接口实现
            </summary>
            <param name="valueArgs">传入参数</param>
            <param name="code">传出状态码</param>
            <returns>接口返回值</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.BaseGetLastError.Check(SuperGMS.Rpc.Nullables,SuperGMS.Protocol.RpcProtocol.StatusCode@)">
            <summary>
            Check
            </summary>
            <param name="args">args</param>
            <param name="code">code</param>
            <returns>bool</returns>
        </member>
        <member name="T:SuperGMS.ApiHelper.ClassInfo">
            <summary>
                类帮助信息
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.ClassInfo.#ctor">
            <summary>
            默认构造
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.ClassInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.ApiHelper.ClassInfo"/> class.
            </summary>
            <param name="assemblyName">程序集</param>
        </member>
        <member name="P:SuperGMS.ApiHelper.ClassInfo.Nullables">
            <summary>
                静态空类型描述
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ClassInfo.AssemlyName">
            <summary>
                微服务集名称
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ClassInfo.FullName">
            <summary>
                完整名称
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ClassInfo.Name">
            <summary>
                名称
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ClassInfo.XmlNode">
            <summary>
                帮助节点名
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ClassInfo.Desc">
            <summary>
                帮助描述
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ClassInfo.LimitDesc">
            <summary>
                限制描述
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ClassInfo.Type">
            <summary>
                类型名称
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ClassInfo.CodeDesc">
            <summary>
            状态码描述
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ClassInfo.JsonDesc">
            <summary>
            json描述信息
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ClassInfo.IsPublic">
            <summary>
            是否开放Api
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ClassInfo.PropertyInfo">
            <summary>
                属性信息
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ClassInfo.ApiClassInfo">
            <summary>
            api
            类相关属性信息
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.ClassInfo.SetSimpleType(System.Type,System.String)">
            <summary>
                设置简单类型
            </summary>
            <param name="type">类型</param>
            <param name="desc">描述</param>
        </member>
        <member name="T:SuperGMS.ApiHelper.JsonSampleReplace">
            <summary>
            json例子替换
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.JsonSampleReplace.#ctor(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.ApiHelper.JsonSampleReplace"/> class.
            </summary>
            <param name="propList">键值对集合</param>
            <param name="jsonObject">json字符串</param>
        </member>
        <member name="M:SuperGMS.ApiHelper.JsonSampleReplace.TryFormatJson">
            <summary>
            格式化json
            </summary>
            <returns>全部类型格式化为字符串</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.JsonSampleReplace.TryReplaceFormatJson(System.String)">
            <summary>
            对jsobject进行替换
            </summary>
            <param name="str">json字符串</param>
            <returns>替换后字符串</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.JsonSampleReplace.SetJsonTimeOrDecmail(Newtonsoft.Json.Linq.JObject)">
            <summary>
            设置或替换JSON中值
            </summary>
            <param name="obj">JSON对象</param>
        </member>
        <member name="M:SuperGMS.ApiHelper.JsonSampleReplace.SetValue(Newtonsoft.Json.Linq.JProperty)">
            <summary>
            设置属性值为字符串
            </summary>
            <param name="jp">属性</param>
        </member>
        <member name="T:SuperGMS.ApiHelper.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="F:SuperGMS.ApiHelper.ObjectGenerator.DefaultCollectionSize">
            <summary>
            默认集合深度
            </summary>
        </member>
        <member name="F:SuperGMS.ApiHelper.ObjectGenerator.simpleObjectGenerator">
            <summary>
            构造器
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ObjectGenerator.XmlCommencts">
            <summary>
            Gets or sets xml注释
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.ObjectGenerator.#ctor(SuperGMS.ApiHelper.Xml.XmlCommentsFileCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.ApiHelper.ObjectGenerator"/> class.
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ObjectGenerator.NoStringProperties">
            <summary>
            Gets 解析完毕后可以获取非字符串的属性名，按顺序排列
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.ObjectGenerator.GetXmlComment(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            得到注释信息
            </summary>
            <param name="type">类型</param>
            <param name="property">类型的属性</param>
            <returns>注释属性</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.ObjectGenerator.SimpleTypeObjectGenerator.CanGenerateObject(System.Type)">
            <summary>
            是否可创建为一个对象
            </summary>
            <param name="type">类型</param>
            <returns>判断标记</returns>
        </member>
        <member name="T:SuperGMS.ApiHelper.ObjectGeneratorEx">
            <summary>
            解析类信息
            </summary>
        </member>
        <member name="F:SuperGMS.ApiHelper.ObjectGeneratorEx.DefaultCollectionSize">
            <summary>
            默认集合深度
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.ObjectGeneratorEx.SimpleTypeObjectGenerator.CanGenerateObject(System.Type)">
            <summary>
            是否可创建为一个对象
            </summary>
            <param name="type">类型</param>
            <returns>判断标记</returns>
        </member>
        <member name="T:SuperGMS.ApiHelper.ParseTypeInfo">
            <summary>
            解析类，
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.ParseTypeInfo.#ctor(System.Reflection.Assembly,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.ApiHelper.ParseTypeInfo"/> class.
            构造函数
            </summary>
            <param name="assembly">术语集合</param>
            <param name="type">类型参数</param>
        </member>
        <member name="P:SuperGMS.ApiHelper.ParseTypeInfo.AssemblyName">
            <summary>
            Gets 程序集名称
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.ParseTypeInfo.Parse">
            <summary>
            解析给定的类
            </summary>
            <returns>类信息</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.ParseTypeInfo.ParseType(System.Type,System.Collections.Generic.Dictionary{System.Type,SuperGMS.ApiHelper.ClassInfo})">
            <summary>
            解析类型
            </summary>
            <param name="type">类型</param>
            <param name="createdObjectReferences">避免无限循环</param>
            <returns>类信息</returns>
        </member>
        <member name="M:SuperGMS.ApiHelper.ParseTypeInfo.ParseArray(System.Type,System.Collections.Generic.Dictionary{System.Type,SuperGMS.ApiHelper.ClassInfo})">
            <summary>
            解析数组
            </summary>
            <param name="arrayType">数组类型</param>
            <param name="createdObjectReferences">已有类型</param>
            <returns>类型西</returns>
        </member>
        <member name="T:SuperGMS.ApiHelper.ServiceInfo">
            <summary>
            微服务信息
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ServiceInfo.Name">
            <summary>
            微服务名称
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ServiceInfo.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ServiceInfo.ReleaseDate">
            <summary>
            发布日期
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ServiceInfo.AssemblyName">
            <summary>
            完成名称
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ServiceInfo.AssemblyPath">
            <summary>
            完整路径
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ServiceInfo.ListenPort">
            <summary>
            监听端口
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ServiceInfo.ComputerName">
            <summary>
            计算机名称
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ServiceInfo.ProcessInfo">
            <summary>
            进程信息
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ServiceInfo.ComputerAddress">
            <summary>
            计算机地址
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.ServiceInfo.NetCoreVersion">
            <summary>
            netcore runtime version
            </summary>
        </member>
        <member name="T:SuperGMS.ApiHelper.Xml.Utility">
            <summary>
            This class contains utility and extension methods
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.Xml.Utility.ReadWithEncoding(System.String,System.Text.Encoding@)">
            <summary>
            This is used to read in a file using an appropriate encoding method
            </summary>
            <param name="filename">The file to load</param>
            <param name="encoding">Pass the default encoding to use.  On return, it contains the actual encoding
            for the file.</param>
            <returns>The contents of the file</returns>
            <remarks>When reading the file, it uses the default encoding specified but detects the encoding if
            byte order marks are present.  In addition, if the template is an XML file and it contains an
            encoding identifier in the XML tag, the file is read using that encoding.</remarks>
        </member>
        <member name="T:SuperGMS.ApiHelper.Xml.XmlCommentsFile">
            <summary>
            Xml 解析辅助类
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.Xml.XmlCommentsFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.ApiHelper.Xml.XmlCommentsFile"/> class.
            Constructor
            </summary>
            <param name="filename">The XML comments filename</param>
            <exception cref="T:System.ArgumentNullException">This is thrown if the filename is null or an empty string</exception>
        </member>
        <member name="P:SuperGMS.ApiHelper.Xml.XmlCommentsFile.SourcePath">
            <summary>
            Gets This read-only property is used to get the source path of the file
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.Xml.XmlCommentsFile.Encoding">
            <summary>
            Gets This read-only property is used to get the encoding, typically UTF-8
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.Xml.XmlCommentsFile.Comments">
            <summary>
            Gets This is used to load the comments file on first use
            </summary>
        </member>
        <member name="P:SuperGMS.ApiHelper.Xml.XmlCommentsFile.Members">
            <summary>
            Gets This read-only property is used to get the root members node
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.Xml.XmlCommentsFile.Save">
            <summary>
            Save the comments file if it was modified
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.Xml.XmlCommentsFile.ForceReload">
            <summary>
            This can be used to force a reload of the comments file if changes were made to it outside of this
            instance.
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.Xml.XmlCommentsFile.Comments_NodeChanged(System.Object,System.Xml.XmlNodeChangedEventArgs)">
            <summary>
            Mark the file as modified if a node is changed
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:SuperGMS.ApiHelper.Xml.XmlCommentsFileCollection">
            <summary>
            注释文档集合
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.Xml.XmlCommentsFileCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.ApiHelper.Xml.XmlCommentsFileCollection"/> class.
            </summary>
        </member>
        <member name="M:SuperGMS.ApiHelper.Xml.XmlCommentsFileCollection.Add(SuperGMS.ApiHelper.Xml.XmlCommentsFile)">
            <summary>
            添加注释文档文件
            </summary>
            <param name="file">文档</param>
        </member>
        <member name="M:SuperGMS.ApiHelper.Xml.XmlCommentsFileCollection.FindMember(System.String)">
            <summary>
            Search all comments files for the specified member.  If not found, add the blank member to the first
            file.
            </summary>
            <param name="memberName">The member name for which to search.</param>
            <returns>The XML node of the found or added member</returns>
        </member>
        <member name="T:SuperGMS.AttributeEx.CodeDescAttribute">
            <summary>
            错误代码描述属性
            </summary>
        </member>
        <member name="M:SuperGMS.AttributeEx.CodeDescAttribute.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.AttributeEx.CodeDescAttribute"/> class.
            默认构造函数，提供接口函数名称 和 错误描述信息
            用于ErrorCode标记的枚举类的枚举属性上，辅助生成帮助文档
            </summary>
            <param name="interfaceName">接口函数名称</param>
            <param name="desc">错误描述信息</param>
        </member>
        <member name="P:SuperGMS.AttributeEx.CodeDescAttribute.InterfaceName">
            <summary>
            Gets or sets 代码引用的接口
            </summary>
        </member>
        <member name="P:SuperGMS.AttributeEx.CodeDescAttribute.Description">
            <summary>
            Gets or sets 错误代码内容
            </summary>
        </member>
        <member name="T:SuperGMS.AttributeEx.ErrorCodeAttribute">
            <summary>
            系统错误码定义属性，协助帮助子系统抓取各个微服务定义的错误码
            </summary>
        </member>
        <member name="T:SuperGMS.AttributeEx.ImportCommentAttribute">
            <summary>
            导入模板中的说明内容,此内容会生成到导入模板的第一行中
            </summary>
        </member>
        <member name="M:SuperGMS.AttributeEx.ImportCommentAttribute.#ctor(System.String)">
            <summary>
            默认构造函数,需要传递导入列的说明
            </summary>
            <param name="comment">导入列的说明, 会根据字符串获取多语言</param>
        </member>
        <member name="P:SuperGMS.AttributeEx.ImportCommentAttribute.Commont">
            <summary>
            备注内容
            </summary>
        </member>
        <member name="T:SuperGMS.AttributeEx.NotImportAttribute">
            <summary>
            非导入属性标签
            </summary>
        </member>
        <member name="T:SuperGMS.AttributeEx.OpenApiAttribute">
            <summary>
            指定api为开放的供第三方调用Api
            </summary>
        </member>
        <member name="M:SuperGMS.AttributeEx.OpenApiAttribute.#ctor(System.String,System.String[])">
            <summary>
            初始化api为开放api
            </summary>
            <param name="ttid"></param>
            <param name="keyDesc">api描述的资源Key</param>
        </member>
        <member name="P:SuperGMS.AttributeEx.OpenApiAttribute.Ttids">
            <summary>
            允许查看的ttid
            </summary>
        </member>
        <member name="P:SuperGMS.AttributeEx.OpenApiAttribute.ApiDesc">
            <summary>
            api描述资源Key
            </summary>
        </member>
        <member name="T:SuperGMS.AttributeEx.OraModelAttribute">
             <summary>
             原始模型,用来获取数据长度,自动构建验证框架,QtFrom控件使用
             另外自定义列表和编辑时也会用oraModel匹配自定义属性
            
             </summary>
        </member>
        <member name="M:SuperGMS.AttributeEx.OraModelAttribute.#ctor(System.Type,System.Type)">
            <summary>
            记录原始Model,用来获取MaxLength
            </summary>
            <param name="oraModel">原始模型</param>
            <param name="dbContext">dbcontext</param>
        </member>
        <member name="P:SuperGMS.AttributeEx.OraModelAttribute.OraModel">
            <summary>
            原始对象
            </summary>
        </member>
        <member name="P:SuperGMS.AttributeEx.OraModelAttribute.DbContext">
            <summary>
            数据库
            </summary>
        </member>
        <member name="T:SuperGMS.AttributeEx.StatusCodeExtension">
            <summary>
            状态码扩展类
            </summary>
        </member>
        <member name="M:SuperGMS.AttributeEx.StatusCodeExtension.ToCode``1(``0)">
            <summary>
            枚举转为 StatusCode
            </summary>
            <typeparam name="TEnumClass">枚举类型</typeparam>
            <param name="enumValue">枚举值</param>
            <returns>状态码</returns>
        </member>
        <member name="M:SuperGMS.AttributeEx.StatusCodeExtension.GetEnumCodeDescription``1(``0)">
            <summary>
            得到枚举类型的CodeDesc属性标签
            </summary>
            <param name="enumValue">枚举值</param>
            <returns>CodeDesc属性标签</returns>
        </member>
        <member name="T:SuperGMS.AttributeEx.UdfModelAttribute">
            <summary>
            指定参数模型约束符合 udf模型定义的约束
            </summary>
        </member>
        <member name="M:SuperGMS.AttributeEx.UdfModelAttribute.#ctor(System.String,System.String)">
            <summary>
            指定dto的自定义模型 遵守的原型
            </summary>
            <param name="sysId"></param>
            <param name="modelName"></param>
        </member>
        <member name="P:SuperGMS.AttributeEx.UdfModelAttribute.SysId">
            <summary>
            sysId
            </summary>
        </member>
        <member name="P:SuperGMS.AttributeEx.UdfModelAttribute.ModelName">
            <summary>
            模型名称
            </summary>
        </member>
        <member name="T:SuperGMS.Cache.CacheManager">
            <summary>
            默认的Default的Redis
            </summary>
        </member>
        <member name="F:SuperGMS.Cache.CacheManager.instance">
            <summary>
            操作redis的实例
            </summary>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.Initlize(SuperGMS.Config.RedisConfig)">
            <summary>
            在用之前需要初始化，这里只所以不做成单例的原因是不想做锁判断
            </summary>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.Initlize(SuperGMS.Cache.ICache)">
            <summary>
            单元测试时, Mock 缓存时,使用,手动初始化
            </summary>
            <param name="cache">Mock 的缓存</param>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.Set(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            放缓存
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="expiry">expiry</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.Set``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            放缓存
            </summary>
            <typeparam name="T">vlue的类型</typeparam>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="expiry">expiry</param>
            <returns>成功与否</returns>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.SetHash``1(System.String,System.Collections.Generic.KeyValuePair{System.String,``0})">
            <summary>
            存HashSet
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.SetHash``1(System.String,System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            存HashSet
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="key">key</param>
            <param name="values">values</param>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.Get(System.String)">
            <summary>
            获取键值
            </summary>
            <param name="key">key</param>
            <returns>string</returns>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.Get``1(System.String)">
            <summary>
            获取键值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="key">key</param>
            <returns>value</returns>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.GetHash``1(System.String,System.String)">
            <summary>
            获取HashSet一条记录
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="key">key</param>
            <param name="filed">列</param>
            <returns>该泛型的列值</returns>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.GetHashAll``1(System.String)">
            <summary>
            取HashSet全部记录
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="key">key</param>
            <returns>所有值</returns>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.RemoveKey(System.String)">
            <summary>
            移除一个指定的key
            </summary>
            <param name="key">key</param>
            <returns>成功与否</returns>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.RemoveHashKey(System.String,System.String)">
            <summary>
            移除HashKey
            </summary>
            <param name="key">key</param>
            <param name="filed">列</param>
            <returns>成功与否</returns>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.ContainsKey(System.String)">
            <summary>
            查找是否包含key的值
            </summary>
            <param name="key">key</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.HashIncrement(System.String,System.String,System.Int64)">
            <summary>
            给Hash的某一个filed 增加 value 个计数
            </summary>
            <param name="key">key</param>
            <param name="filed">列</param>
            <param name="value">值</param>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.HashDecrement(System.String,System.String,System.Int64)">
            <summary>
            给Hash的某一个filed 减去 value 个计数
            </summary>
            <param name="key">key</param>
            <param name="filed">列</param>
            <param name="value">值</param>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.StringIncrement(System.String,System.Int64)">
            <summary>
            给一个字符串增加 value个计数
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.StringDecrement(System.String,System.Int64)">
            <summary>
            给一个字符串减去 value个计数
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.PushQueue(System.String,System.String,System.Int32)">
            <summary>
            Redis是单进程单线程，不存在并发问题，因此只要保证多条命令原则执行即可
            </summary>
            <param name="key">队列名称</param>
            <param name="value">值</param>
            <param name="queueSize">值</param>
            <returns>是否</returns>
        </member>
        <member name="M:SuperGMS.Cache.CacheManager.PopAllQueue(System.String)">
            <summary>
            弹出 最大的日志信息
            </summary>
            <param name="key">队列名称</param>
            <returns>最大数量日志</returns>
        </member>
        <member name="T:SuperGMS.Cache.CacheTools">
            <summary>
            资源缓存名称生成器
            </summary>
        </member>
        <member name="M:SuperGMS.Cache.CacheTools.GetPublicResourceKey(System.String)">
            <summary>
            返回指定语言的基础资源key
            </summary>
            <param name="lang">语言</param>
            <returns>基础资源key</returns>
        </member>
        <member name="M:SuperGMS.Cache.CacheTools.GetUdfResourceKey(System.String,System.String)">
            <summary>
            返回指定ttid，语言的定制化资源key
            </summary>
            <param name="ttid">域</param>
            <param name="lang">语言</param>
            <returns>定制化资源key</returns>
        </member>
        <member name="M:SuperGMS.Cache.CacheTools.GetUdfResourceKey(System.String)">
            <summary>
            返回指定ttid，语言的定制化资源key
            </summary>
            <param name="ttidLang">域</param>
            <returns>定制化资源key</returns>
        </member>
        <member name="M:SuperGMS.Cache.CacheTools.GetUdfTtidsKey">
            <summary>
            返回定制化资源 ttids集合 Key
            </summary>
            <returns>ttids集合 Key</returns>
        </member>
        <member name="M:SuperGMS.Cache.CacheTools.GetLangsKey">
            <summary>
            返回资源语言种类Key
            </summary>
            <returns>ttids集合 Key</returns>
        </member>
        <member name="M:SuperGMS.Cache.CacheTools.GetResourceFiledPrefix(SuperGMS.Extensions.Enum.HashKeyType,System.String)">
            <summary>
            获取资源文件 HashKeyFiled , 一种是默认级别, 一种是租户级别
            </summary>
            <param name="context">上下文</param>
            <param name="type">类型</param>
            <param name="field">field</param>
            <returns>资源文件的前缀</returns>
        </member>
        <member name="T:SuperGMS.Cache.ICache">
            <summary>
            ICache
            </summary>
        </member>
        <member name="M:SuperGMS.Cache.ICache.IsExistCfg">
            <summary>
            是否存在Redis配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Cache.ICache.Set(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Set
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="expiry">expiry</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Cache.ICache.Set``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            放缓存
            </summary>
            <typeparam name="T">vlue的类型</typeparam>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="expiry">expiry</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Cache.ICache.SetHash``1(System.String,System.Collections.Generic.KeyValuePair{System.String,``0})">
            <summary>
            存HashSet
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Cache.ICache.SetHash``1(System.String,System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            存HashSet
            </summary>
            <param name="key">key</param>
            <param name="values">value</param>
        </member>
        <member name="M:SuperGMS.Cache.ICache.Get(System.String)">
            <summary>
            获取键值
            </summary>
            <param name="key">key</param>
            <returns>string</returns>
        </member>
        <member name="M:SuperGMS.Cache.ICache.Get``1(System.String)">
            <summary>
            获取键值
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="key">key</param>
            <returns>TT</returns>
        </member>
        <member name="M:SuperGMS.Cache.ICache.GetHash``1(System.String,System.String)">
            <summary>
            获取HashSet一条记录
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="key">key</param>
            <param name="filed">filed</param>
            <returns>TT</returns>
        </member>
        <member name="M:SuperGMS.Cache.ICache.GetHashAll``1(System.String)">
            <summary>
            取HashSet全部记录
            </summary>
            <param name="key">key</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:SuperGMS.Cache.ICache.RemoveKey(System.String)">
            <summary>
            移除一个指定的key
            </summary>
            <param name="key">key</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Cache.ICache.RemoveHashKey(System.String,System.String)">
            <summary>
            移除HashKey
            </summary>
            <param name="key">key</param>
            <param name="filed">filed</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Cache.ICache.ContainsKey(System.String)">
            <summary>
            查找是否包含key的值
            </summary>
            <param name="key">key</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Cache.ICache.HashIncrement(System.String,System.String,System.Int64)">
            <summary>
            给Hash的某一个filed 增加 value 个计数
            </summary>
            <param name="key">key</param>
            <param name="filed">filed</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Cache.ICache.HashDecrement(System.String,System.String,System.Int64)">
            <summary>
            给Hash的某一个filed 减去 value 个计数
            </summary>
            <param name="key">key</param>
            <param name="filed">filed</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Cache.ICache.StringIncrement(System.String,System.Int64)">
            <summary>
            给一个字符串增加 value个计数
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Cache.ICache.StringDecrement(System.String,System.Int64)">
            <summary>
            给一个字符串减去 value个计数
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Cache.ICache.PushQueue(System.String,System.String,System.Int32)">
            <summary>
            Redis是单进程单线程，不存在并发问题，因此只要保证多条命令原则执行即可
            </summary>
            <param name="key">队列名称</param>
            <param name="value">值</param>
            <param name="queueSize">队列长度</param>
            <returns>是否</returns>
        </member>
        <member name="M:SuperGMS.Cache.ICache.PopAllQueue(System.String)">
            <summary>
            弹出 最大的日志信息
            </summary>
            <param name="key">队列名称</param>
            <returns>最大数量日志</returns>
        </member>
        <member name="M:SuperGMS.Cache.ICache.LockTake(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            默认超时 ：1分钟
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Cache.ICache.LockQuery(System.String,System.String)">
            <summary>
            查询锁
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Cache.ICache.LockRelease(System.String,System.String)">
            <summary>
            释放锁 ，值必须对才可以释放
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.Cache.RedisCache">
            <summary>
            Redis Cache 实现类
            </summary>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.#ctor">
            <summary>
            默认使用的 Default
            </summary>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.#ctor(System.String)">
            <summary>
            可以规定存储区
            </summary>
            <param name="redisName"></param>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.Set(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            放缓存
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="expiry">expiry</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.Set``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            放缓存
            </summary>
            <typeparam name="T">vlue的类型</typeparam>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="expiry">expiry</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.SetHash``1(System.String,System.Collections.Generic.KeyValuePair{System.String,``0})">
            <summary>
            存HashSet
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.SetHash``1(System.String,System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            存HashSet
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="key">key</param>
            <param name="values">value</param>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.Get(System.String)">
            <summary>
            获取键值
            </summary>
            <param name="key">key</param>
            <returns>string</returns>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.Get``1(System.String)">
            <summary>
            获取键值
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="key">key</param>
            <returns>TT</returns>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.GetHash``1(System.String,System.String)">
            <summary>
            获取HashSet一条记录
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="key">key</param>
            <param name="filed">filed</param>
            <returns>TT</returns>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.GetHashAll``1(System.String)">
            <summary>
            取HashSet全部记录
            </summary>
            <param name="key">key</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.RemoveKey(System.String)">
            <summary>
            移除一个指定的key
            </summary>
            <param name="key">key</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.RemoveHashKey(System.String,System.String)">
            <summary>
            移除HashKey
            </summary>
            <param name="key">key</param>
            <param name="filed">filed</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.ContainsKey(System.String)">
            <summary>
            查找是否包含key的值
            </summary>
            <param name="key">key</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.HashIncrement(System.String,System.String,System.Int64)">
            <summary>
            给Hash的某一个filed 增加 value 个计数
            </summary>
            <param name="key">key</param>
            <param name="filed">filed</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.HashDecrement(System.String,System.String,System.Int64)">
            <summary>
            给Hash的某一个filed 减去 value 个计数
            </summary>
            <param name="key">key</param>
            <param name="filed">filed</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.StringIncrement(System.String,System.Int64)">
            <summary>
            给一个字符串增加 value个计数
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.StringDecrement(System.String,System.Int64)">
            <summary>
            给一个字符串减去 value个计数
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.PushQueue(System.String,System.String,System.Int32)">
            <summary>
            Redis是单进程单线程，不存在并发问题，因此只要保证多条命令原则执行即可
            </summary>
            <param name="key">队列名称</param>
            <param name="value">值</param>
            <param name="queueSize">size</param>
            <returns>是否</returns>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.PopAllQueue(System.String)">
            <summary>
            弹出 最大的日志信息
            </summary>
            <param name="key">队列名称</param>
            <returns>最大数量日志</returns>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.LockTake(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            默认超时 ：1分钟
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.LockQuery(System.String,System.String)">
            <summary>
            查询锁
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Cache.RedisCache.LockRelease(System.String,System.String)">
            <summary>
            释放锁 ，值必须对才可以释放
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.Cache.ResourceCache">
            <summary>
            资源文件
            </summary>
        </member>
        <member name="P:SuperGMS.Cache.ResourceCache.Instance">
            <summary>
            操作redis的实例
            </summary>
        </member>
        <member name="M:SuperGMS.Cache.ResourceCache.Initlize(SuperGMS.Cache.ICache)">
            <summary>
            单元测试时, Mock 缓存时,使用,手动初始化
            </summary>
            <param name="cache">Mock 的缓存</param>
        </member>
        <member name="T:SuperGMS.Config.ConfigCenter">
            <summary>
            ConfigCenter
            </summary>
        </member>
        <member name="P:SuperGMS.Config.ConfigCenter.ConfigType">
            <summary>
            配置类型 
            </summary>
        </member>
        <member name="P:SuperGMS.Config.ConfigCenter.Ip">
            <summary>
            Gets or sets ip   zk的ip和端口是统一配置在一起的，主要考虑到zk集群部署会有多个节点  ip1:port1,ip2:port2
            </summary>
        </member>
        <member name="P:SuperGMS.Config.ConfigCenter.SessionTimeout">
            <summary>
            如果配置是zk  这个表示的zk连接的超时时间
            </summary>
        </member>
        <member name="T:SuperGMS.Config.ConfigType">
            <summary>
            配置类型
            </summary>
        </member>
        <member name="F:SuperGMS.Config.ConfigType.Local">
            <summary>
            本地配置
            </summary>
        </member>
        <member name="F:SuperGMS.Config.ConfigType.Zookeeper">
            <summary>
            zookeeper配置
            </summary>
        </member>
        <member name="F:SuperGMS.Config.ConfigType.HttpFile">
            <summary>
            文件配置中心
            </summary>
        </member>
        <member name="T:SuperGMS.Config.ConfigManager">
            <summary>
            ConfigManager
            </summary>
        </member>
        <member name="F:SuperGMS.Config.ConfigManager.RPCSERVICE">
            <summary>
            rpc服务端的配置
            </summary>
        </member>
        <member name="F:SuperGMS.Config.ConfigManager.RPCCLIENT">
            <summary>
            rpc客戶端在配文件中的名字
            </summary>
        </member>
        <member name="F:SuperGMS.Config.ConfigManager.CONSTKEYVALUE">
            <summary>
            常量在配置文件中的名字
            </summary>
        </member>
        <member name="M:SuperGMS.Config.ConfigManager.Initlize(SuperGMS.Config.ConstKeyValue)">
            <summary>
            Initlize
            </summary>
            <param name="xml">xml</param>
        </member>
        <member name="M:SuperGMS.Config.ConfigManager.GetConstKeyValue(System.String)">
            <summary>
            获取grant.config中ConstKeyValue 的某一个item值
            </summary>
            <param name="key">key的值</param>
            <returns>KeyValue对象</returns>
        </member>
        <member name="T:SuperGMS.Config.Configuration">
            <summary>
            Configuration
            </summary>
        </member>
        <member name="P:SuperGMS.Config.Configuration.ConfigPath">
            <summary>
            ConfigPath
            </summary>
        </member>
        <member name="P:SuperGMS.Config.Configuration.ServerConfig">
            <summary>
            基础配置
            </summary>
        </member>
        <member name="P:SuperGMS.Config.Configuration.DataBase">
            <summary>
            数据库
            </summary>
        </member>
        <member name="P:SuperGMS.Config.Configuration.ConfigLog">
            <summary>
            日志
            </summary>
        </member>
        <member name="P:SuperGMS.Config.Configuration.ConstKeyValue">
            <summary>
            用户自定义常量 特殊处理
            </summary>
        </member>
        <member name="P:SuperGMS.Config.Configuration.RabbitMQ">
            <summary>
            RabbitMQ
            </summary>
        </member>
        <member name="P:SuperGMS.Config.Configuration.RedisConfig">
            <summary>
            Redis
            </summary>
        </member>
        <member name="P:SuperGMS.Config.Configuration.RpcClients">
            <summary>
            RpcClients
            </summary>
        </member>
        <member name="P:SuperGMS.Config.Configuration.HttpProxy">
            <summary>
            HttpProxy
            </summary>
        </member>
        <member name="P:SuperGMS.Config.Configuration.FileServer">
            <summary>
            FileServer
            </summary>
        </member>
        <member name="T:SuperGMS.Config.ConstItem">
            <summary>
            ConstItem
            </summary>
        </member>
        <member name="P:SuperGMS.Config.ConstItem.Key">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.ConstItem.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:SuperGMS.Config.ConstKeyValue">
            <summary>
            ConstKeyValue
            </summary>
        </member>
        <member name="P:SuperGMS.Config.ConstKeyValue.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:SuperGMS.Config.DataBase">
            <summary>
            DataBase
            </summary>
        </member>
        <member name="P:SuperGMS.Config.DataBase.DbFile">
            <summary>
            数据库文件引用路径
            </summary>
        </member>
        <member name="T:SuperGMS.Config.DataBaseInfo">
            <summary>
            DataBaseInfo
            </summary>
        </member>
        <member name="T:SuperGMS.Config.DbIpPort">
            <summary>
            DbIpPort
            </summary>
        </member>
        <member name="P:SuperGMS.Config.DbIpPort.Ip">
            <summary>
            Gets or sets 数据库Ip
            </summary>
        </member>
        <member name="P:SuperGMS.Config.DbIpPort.Port">
            <summary>
            Gets or sets 数据库Port
            </summary>
        </member>
        <member name="T:SuperGMS.Config.DbModelContext">
            <summary>
            数据库配置对象,  包含了数据库连接信息, 以及EF对应的上下文名称, 以及数据库类型, 主从配置
            </summary>
        </member>
        <member name="P:SuperGMS.Config.DbModelContext.DbContextName">
            <summary>
            Gets or sets dbcontext名字，通过这个名字来关联物理数据库和数据模型
            </summary>
        </member>
        <member name="P:SuperGMS.Config.DbModelContext.DbType">
            <summary>
            Gets or sets 数据库类型
            </summary>
        </member>
        <member name="P:SuperGMS.Config.DbModelContext.Pool">
            <summary>
            Gets or sets 索引
            </summary>
        </member>
        <member name="P:SuperGMS.Config.DbModelContext.UserName">
            <summary>
            Gets or sets 登录用户名
            </summary>
        </member>
        <member name="P:SuperGMS.Config.DbModelContext.PassWord">
            <summary>
            Gets or sets 密码
            </summary>
        </member>
        <member name="P:SuperGMS.Config.DbModelContext.Database">
            <summary>
            Gets or sets 数据库名称
            </summary>
        </member>
        <member name="P:SuperGMS.Config.DbModelContext.Master">
            <summary>
            Gets or sets 主库配置
            </summary>
        </member>
        <member name="P:SuperGMS.Config.DbModelContext.Slaves">
            <summary>
            Gets or sets 从库配置列表
            </summary>
        </member>
        <member name="T:SuperGMS.Config.DbModelContextManager">
            <summary>
            DbModelContextManager
            </summary>
        </member>
        <member name="F:SuperGMS.Config.DbModelContextManager.DATABASE">
            <summary>
            配置文件中数据库的跟配置节
            </summary>
        </member>
        <member name="F:SuperGMS.Config.DbModelContextManager.DATABASEINFO">
            <summary>
            数据库连接信息配置节点
            </summary>
        </member>
        <member name="F:SuperGMS.Config.DbModelContextManager.SQLMAP">
            <summary>
            sql脚本配置节点
            </summary>
        </member>
        <member name="F:SuperGMS.Config.DbModelContextManager.REFFILE">
            <summary>
            是否通过引用文件来配置的标记
            </summary>
        </member>
        <member name="M:SuperGMS.Config.DbModelContextManager.Initlize(System.Xml.Linq.XElement)">
            <summary>
            初始化配置
            </summary>
            <param name="xml">xml</param>
        </member>
        <member name="M:SuperGMS.Config.DbModelContextManager.GetDataBase(System.String)">
            <summary>
            解析数据库配置文件内容到Xml
            </summary>
            <param name="dbFile">不包含文件路径时,则在应用的根目录下的Config文件夹中获取</param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Config.DbModelContextManager.GetDbModelContext(System.String)">
            <summary>
            获取特定的数据库连接信息
            </summary>
            <param name="dbContextName">dbContextName</param>
            <returns>DbModelContext</returns>
        </member>
        <member name="T:SuperGMS.Config.Master">
            <summary>
            Master
            </summary>
        </member>
        <member name="T:SuperGMS.Config.Slave">
            <summary>
            Slave
            </summary>
        </member>
        <member name="P:SuperGMS.Config.Slave.Pool">
            <summary>
            Gets or sets 索引
            </summary>
        </member>
        <member name="T:SuperGMS.Config.SqlMap">
            <summary>
            SqlMap
            </summary>
        </member>
        <member name="T:SuperGMS.Config.SqlMapManager">
            <summary>
            SqlMapManager ,sqlMap单独一个管理类，主要是不想和DbModelContext共享一个lock，影响并发性能
            </summary>
        </member>
        <member name="M:SuperGMS.Config.SqlMapManager.Initlize(System.Xml.Linq.XElement)">
            <summary>
            初始化sql文件
            </summary>
            <param name="sqlMapElement">sql 配置xml</param>
        </member>
        <member name="M:SuperGMS.Config.SqlMapManager.GetSql(System.String,System.String)">
            <summary>
            获取一个sql
            </summary>
            <param name="dbModelContextName">dbModelContextName</param>
            <param name="sqlKey">key</param>
            <returns>sql</returns>
        </member>
        <member name="M:SuperGMS.Config.SqlMapManager.BuildSqlMap(System.Xml.Linq.XElement)">
            <summary>
            通过配置文件把sql 以key value的方式放到内存中
            </summary>
            <param name="sqlInfo">配置文件</param>
        </member>
        <member name="M:SuperGMS.Config.SqlMapManager.GetSqlKey(System.String,System.String)">
            <summary>
            组织一个sqlKey
            </summary>
            <param name="dbModelContextName">dbModelContextName</param>
            <param name="sqlMapKey">sqlMapKey</param>
            <returns>key</returns>
        </member>
        <member name="T:SuperGMS.Config.FileServer">
            <summary>
            FileServer
            </summary>
        </member>
        <member name="P:SuperGMS.Config.FileServer.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:SuperGMS.Config.FileServerItem">
            <summary>
            FileServerItem
            </summary>
        </member>
        <member name="P:SuperGMS.Config.FileServerItem.Pool">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.FileServerItem.Url">
            <summary>
            
            </summary>
        </member>
        <member name="T:SuperGMS.Config.FileServerManager">
            <summary>
            FileServerManager
            </summary>
        </member>
        <member name="M:SuperGMS.Config.FileServerManager.Initlize(SuperGMS.Config.FileServer)">
            <summary>
            初始化配置
            </summary>
            <param name="xml">xml</param>
        </member>
        <member name="M:SuperGMS.Config.FileServerManager.GetFileServers">
            <summary>
            获取文件服务器列表
            </summary>
            <returns>文件服务器列表</returns>
        </member>
        <member name="T:SuperGMS.Config.HttpProxy">
            <summary>
            HttpProxy
            </summary>
        </member>
        <member name="P:SuperGMS.Config.HttpProxy.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:SuperGMS.Config.HttpProxyItem">
            <summary>
            HttpProxyItem
            </summary>
        </member>
        <member name="P:SuperGMS.Config.HttpProxyItem.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:SuperGMS.Config.LogConfig.Filter">
            <summary>
            Filter
            </summary>
        </member>
        <member name="P:SuperGMS.Config.LogConfig.Filter.FilterGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.LogConfig.Filter.FilterApiName">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.LogConfig.Filter.FilterServiceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.LogConfig.Filter.FilterWords">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.LogConfig.Filter.LogLevel">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.LogConfig.Filter.MaxSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:SuperGMS.Config.LogConfig.LogConfig">
            <summary>
            LogConfig
            </summary>
        </member>
        <member name="P:SuperGMS.Config.LogConfig.LogConfig.LogLocation">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.LogConfig.LogConfig.ShowConsole">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.LogConfig.LogConfig.Filter">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.ServerConfig.RpcService">
            <summary>
             rpcService
            </summary>
        </member>
        <member name="T:SuperGMS.Config.HostItem">
            <summary>
            HostItem
            </summary>
        </member>
        <member name="P:SuperGMS.Config.HostItem.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.HostItem.Ip">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.HostItem.Port">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.HostItem.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.HostItem.PassWord">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.HostItem.NoAckMsgCount">
            <summary>
            最大允许未Ack的消息数量
            </summary>
        </member>
        <member name="T:SuperGMS.Config.RabbitMQ">
            <summary>
            RabbitMQ
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RabbitMQ.Host">
            <summary>
            
            </summary>
        </member>
        <member name="T:SuperGMS.Config.RedisConfig">
            <summary>
            RedisConfig
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RedisConfig.Nodes">
            <summary>
            
            </summary>
        </member>
        <member name="T:SuperGMS.Config.RedisItem">
            <summary>
            RedisItem
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RedisItem.Pool">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RedisItem.IsMaster">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RedisItem.Server">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RedisItem.Port">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RedisItem.AllowAdmin">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RedisItem.ConnectTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RedisItem.Ssl">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RedisItem.Ssl2">
            <summary>
            新加redis ssl配置，为了兼容老的ssl 默认是false
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RedisItem.Pwd">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RedisItem.DbIndex">
            <summary>
            redis 数据库索引
            </summary>
        </member>
        <member name="T:SuperGMS.Config.RedisNode">
            <summary>
            NodeItem
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RedisNode.NodeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RedisNode.IsMasterSlave">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RedisNode.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:SuperGMS.Config.RemoteJsonFile.RemoteJsonFileConfigurationProvider">
            <summary>
            Base class for file based <see cref="T:Microsoft.Extensions.Configuration.ConfigurationProvider" />.
            </summary>
        </member>
        <member name="M:SuperGMS.Config.RemoteJsonFile.RemoteJsonFileConfigurationProvider.#ctor(SuperGMS.Config.RemoteJsonFile.RemoteJsonFileConfigurationSource)">
            <summary>
            Initializes a new instance with the specified source.
            </summary>
            <param name="source">The source settings.</param>
        </member>
        <member name="P:SuperGMS.Config.RemoteJsonFile.RemoteJsonFileConfigurationProvider.Source">
            <summary>
            The source settings for this provider.
            </summary>
        </member>
        <member name="M:SuperGMS.Config.RemoteJsonFile.RemoteJsonFileConfigurationProvider.Load">
            <summary>
            Loads the contents of the file from remote url.
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RemoteJsonFile.RemoteJsonFileConfigurationSource.Uri">
            <summary>
            The Uri for download file.
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RemoteJsonFile.RemoteJsonFileConfigurationSource.Optional">
            <summary>
            Determines if loading the file is optional.
            </summary>
        </member>
        <member name="M:SuperGMS.Config.RemoteJsonFile.RemoteJsonFileConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Builds the <see cref="T:Grant.NetCore.Superman.Configuration.RemoteJsonFileConfigurationProvider" /> for this source.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder" />.</param>
            <returns>A <see cref="T:Grant.NetCore.Superman.Configuration.RemoteJsonFileConfigurationProvider" /></returns>
        </member>
        <member name="P:SuperGMS.Config.RpcClients.Clients">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.Client.ServerName">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.Client.RouterType">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.Client.Items">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.ClientItem.Pool">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.ClientItem.Ip">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.ClientItem.Port">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.ClientItem.TimeOut">
            <summary>
            TimeOut
            </summary>
        </member>
        <member name="P:SuperGMS.Config.ClientItem.ServerType">
            <summary>
            ServerType
            </summary>
        </member>
        <member name="P:SuperGMS.Config.ClientItem.Enable">
            <summary>
            是否启用 ，本地配置不用这个，缺省为true
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RpcService.Pool">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RpcService.Ip">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RpcService.Port">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RpcService.PortList">
            <summary>
            集中配置是的服务和Port列表
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RpcService.ServerType">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RpcService.AssemblyPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RpcService.TimeOut">
            <summary>
             timeout
            </summary>
        </member>
        <member name="P:SuperGMS.Config.RpcService.Enable">
            <summary>
            当前服务是否被标记为可用，默认可用，除非被标记，这个标记变了之后，本地也要修改，下次启动需要根据这个值来处理
            </summary>
        </member>
        <member name="T:SuperGMS.Config.ServerSetting">
            <summary>
            ServerSetting
            </summary>
        </member>
        <member name="P:SuperGMS.Config.ServerSetting.AppName">
            <summary>
            Gets appName
            </summary>
        </member>
        <member name="M:SuperGMS.Config.ServerSetting.SetAppNameForTest(System.String)">
            <summary>
            初始化AppName, 此方法仅给单元测试提供调用, 只有_appName没有值时,才能设置
            </summary>
            <param name="value">Name</param>
        </member>
        <member name="P:SuperGMS.Config.ServerSetting.ConfigCenter">
            <summary>
            配置类型
            </summary>
        </member>
        <member name="P:SuperGMS.Config.ServerSetting.Config">
            <summary>
            Gets config
            </summary>
        </member>
        <member name="P:SuperGMS.Config.ServerSetting.Pool">
            <summary>
            Gets pool
            </summary>
        </member>
        <member name="M:SuperGMS.Config.ServerSetting.GetConstValue(System.String)">
            <summary>
            获取ConstValue配置信息
            </summary>
            <param name="key">key值</param>
            <returns>ConstKeyValue</returns>
        </member>
        <member name="M:SuperGMS.Config.ServerSetting.GetFileServers">
            <summary>
            获取File服务器的地址列表
            </summary>
            <returns>FileServer[]</returns>
        </member>
        <member name="M:SuperGMS.Config.ServerSetting.GetConfiguration(System.Action{System.String,SuperGMS.Config.Configuration})">
            <summary>
            外部关心的系统变更新，目前只有log在使用，其他的变更ServerSetting会帮着处理，不用关心变更
            </summary>
            <param name="updateAction">updateAction回调方法</param>
            <returns>Configuration</returns>
        </member>
        <member name="M:SuperGMS.Config.ServerSetting.RegisterRouter(System.String,System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>
            注册zookeeper使用
            </summary>
            <param name="serverName"></param>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="enable"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:SuperGMS.Config.ServerSetting.GetHttpProxy(System.String,System.Action{SuperGMS.Config.Configuration})">
            <summary>
            HttpProxy 配置,主要配置那些微服务可以提供外部api服务
            </summary>
            <param name="proxyName">proxyName</param>
            <param name="updateAction">updateAction</param>
            <returns>HttpProxy</returns>
        </member>
        <member name="M:SuperGMS.Config.ServerSetting.GetAppClient(System.String,System.Action{SuperGMS.Config.Configuration})">
            <summary>
            RpcClinet 客户端初始化信息，路由
            </summary>
            <param name="appName">appName</param>
            <returns>XElement</returns>
        </member>
        <member name="M:SuperGMS.Config.ServerSetting.GetAllClientsByServiceName(System.String)">
            <summary>
            获取某个服务在集群中的所有负载地址，包括自己,注意必须是基于zk部署，或者集中配置中心才行，单个super.json的配置是无法知道负载地址的
            </summary>
            <param name="serviceName">服务名称</param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Config.ServerSetting.Initlize(System.String,System.Int32)">
            <summary>
            RpcServer 服务端
            根据配置加载配置信息，凡是后端微服务不用自己初始化，
            直接注册RpcServer就可以（RpcServer里面已经初始化了），如果也要注册RpcClient，RpcClient的注册要放在后面
            在前端代理层，需要先初始化Initlize()
            </summary>
            <param name="appName">appName</param>
            <param name="pool">pool</param>
        </member>
        <member name="F:SuperGMS.Config.ServerSetting.dbXMl">
            <summary>
            找到这个节点,并且替换
            </summary>
            <param name="xml">xml</param>
        </member>
        <member name="M:SuperGMS.Config.ServerSetting.UpdateLocal(SuperGMS.Config.Configuration)">
            <summary>
            Local的配置
            系统的所有的基础性配置都会在这里初始化
            </summary>
            <param name="configuration">本地配置json</param>
        </member>
        <member name="M:SuperGMS.Config.ServerSetting.UpdateZookeeper(System.String,System.String)">
            <summary>
            按推送节点更新
            </summary>
            <param name="path">变更路径</param>
        </member>
        <member name="M:SuperGMS.Config.ServerSetting.GetRpcServer(System.String)">
            <summary>
            这个是当前微服务第一个要调用的，在ServerProxy的Register()里面用
            这个是获取本地配置，因为rpcServer的配置只在本地配置文件中
            这里只设置了 configCenter，rpcServer
            这里还没有设置config,只有经过Initlize才设置
            </summary>
            <returns>XElement</returns>
        </member>
        <member name="M:SuperGMS.Config.ServerSetting.GetDbModelContext(System.String)">
            <summary>
            根据dbContextName 获取对应得物理数据库的信息
            </summary>
            <param name="dbContextName">dbContextName</param>
            <returns>DbModelContext</returns>
        </member>
        <member name="M:SuperGMS.Config.ServerSetting.GetSql(System.String,System.String)">
            <summary>
            根据dbContext的名称和sqlKey获取sql语句
            </summary>
            <param name="dbContextName">dbContextName</param>
            <param name="sqlKey">sqlKey</param>
            <returns>string</returns>
        </member>
        <member name="M:SuperGMS.Config.ServerSetting.InitConfiguration">
            <summary>
            初始化服务配置(本地super.json中必须指明读取的配置源)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Config.ServerSetting.getLocalIp">
            <summary>
            通过通配符来匹配本地Ip，主要为了适应多台机器共享配置，多台机器肯定是同一个局域网，Ip规则如：192.168.100.121  192.168.100.126  所以通配符配置如：192.168.100.*  因为对于多网卡的机器来说，多个网卡肯定是不同网段的，否则就没有意义了，所以使用通配符既可以适应多台机器，又能过滤出来正确的Ip
            </summary>
        </member>
        <member name="T:SuperGMS.Config.ZKConfigSetting">
            <summary>
            ZKConfigSetting
            </summary>
        </member>
        <member name="M:SuperGMS.Config.ZKConfigSetting.LoadConfig(System.String,System.String,System.Int32)">
            <summary>
            LoadConfig
            </summary>
            <param name="appName">appName</param>
            <param name="ip">ip</param>
            <param name="port">port</param>
            <returns>xml</returns>
        </member>
        <member name="T:SuperGMS.DB.AttributeEx.ConvertValueAttribute">
            <summary>
            转换值属性
            </summary>
        </member>
        <member name="F:SuperGMS.DB.AttributeEx.ConvertValueAttribute._t">
            <summary>
            动态转换,实现了ICovertValue接口的类型
            </summary>
        </member>
        <member name="F:SuperGMS.DB.AttributeEx.ConvertValueAttribute._invokeParams">
            <summary>
            动态转换,调用iCovertValue时的参数
            </summary>
        </member>
        <member name="F:SuperGMS.DB.AttributeEx.ConvertValueAttribute._isResource">
            <summary>
            是否通过资源文件转换
            </summary>
        </member>
        <member name="F:SuperGMS.DB.AttributeEx.ConvertValueAttribute._values">
            <summary>
            静态转换,常量类型转换值
            </summary>
        </member>
        <member name="P:SuperGMS.DB.AttributeEx.ConvertValueAttribute.ConvertDic">
            <summary>
            字典类型,记录转换的键值对,键对应Value,值对应Name
            </summary>
        </member>
        <member name="M:SuperGMS.DB.AttributeEx.ConvertValueAttribute.#ctor(System.String)">
            <summary>
            将转换值以 "OPEN:开放,CONFIRM:审核" 传入
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:SuperGMS.DB.AttributeEx.ConvertValueAttribute.GetName(System.String)">
            <summary>
            根据键值获取Name
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.AttributeEx.ConvertValueAttribute.GetKeyNameDictionary">
            <summary>
            获取一个键值对的字典
            </summary>
            <returns></returns>
        </member>
        <member name="P:SuperGMS.DB.AttributeEx.ViewOraModelAttribute.OraModel">
            <summary>
            原始对象
            </summary>
        </member>
        <member name="M:SuperGMS.DB.AttributeEx.ViewOraModelAttribute.#ctor(System.Type)">
            <summary>
            记录原始Model
            </summary>
            <param name="oraModel"></param>
        </member>
        <member name="T:SuperGMS.DB.DataBaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="T:SuperGMS.DB.DatabaseTool">
            <summary>
            数据库工具类
            </summary>
        </member>
        <member name="M:SuperGMS.DB.DatabaseTool.GetDbType(System.Data.Common.DbConnection)">
            <summary>
            获取数据库类型
            </summary>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.DatabaseTool.GetDbType(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
            获取数据库类型
            </summary>
            <param name="dataBase"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.DatabaseTool.IsOracleDb(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
            判断是否是Oracle数据库
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.DatabaseTool.IsOracleDb(System.Data.Common.DbConnection)">
            <summary>
            判断是否是Oracle数据库
            </summary>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.DatabaseTool.IsMySqlDb(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
            判断是否是MySql数据库
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.DatabaseTool.IsMySqlDb(System.Data.Common.DbConnection)">
            <summary>
            判断是否是MySql数据库
            </summary>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.DatabaseTool.IsSqlServerDb(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
            判断是否是SqlServer数据库
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.DatabaseTool.IsSqlServerDb(System.Data.Common.DbConnection)">
            <summary>
            判断是否是SqlServer数据库
            </summary>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.ConnectionManager">
            <summary>
            数据连接管理器
            2015年10月13日修改  为了给DbContextFactory提供依赖注入
            2016-12-16 增加读写分离相关内容
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.ConnectionManager.DbConnection">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ConnectionManager.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ConnectionManager.#ctor(System.Data.Common.DbConnection)">
            <summary>
            构造函数
            </summary>
            <param name="dbConection">数据库连接对象</param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ConnectionManager.CreateMySqlDbOption``1(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            创建DbContext 构造参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ConnectionManager.CreateConection(System.String,SuperGMS.DB.EFEx.DbType)">
            <summary>
            创建数据库连接
            </summary>
            <param name="conectionString">数据库连接字符串</param>
            <param name="dbType">数据库类型MYSQL,MSSQL</param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ConnectionManager.Clone(System.Data.Common.DbConnection)">
            <summary>
            克隆原始数据库连接
            </summary>
            <param name="conection"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ConnectionManager.CreateConection(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            创建数据库连接对象
            </summary>
            <param name="server">服务器地址</param>
            <param name="database">数据库</param>
            <param name="uid">用户名</param>
            <param name="pwd">密码</param>
            <param name="dbType">数据库类型,默认MYSQL</param>
            <returns>数据库连接对象</returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.EFCrudRepository`1">
            <summary>
                EF数据访问公共类,提供了 CRUD 和分页查询公共方法， 可以被继承增加更多的数据访问方法
                Add By Grant 2014-3-26
            </summary>
            <typeparam name="T">可以实例化的类</typeparam>
        </member>
        <member name="F:SuperGMS.DB.EFEx.EFCrudRepository`1.Context">
            <summary>
            Context
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.#ctor(Microsoft.EntityFrameworkCore.DbContext,SuperGMS.DB.EFEx.DbInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.DB.EFEx.EFCrudRepository`1"/> class.
            默认构造方法需要传递一个 DbContext
            </summary>
            <param name="dbContext">dbContext</param>
            <param name="dbInfo">dbInfo</param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.GetByPage(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SuperGMS.DB.EFEx.DynamicSearch.PageInfo,System.Int32@,System.Boolean)">
            <summary>
            根据条件查询 并且分页，返回总记录数
            </summary>
            <param name="exp">查询表达式</param>
            <param name="pageInfo">分页信息<see cref="T:SuperGMS.DB.EFEx.DynamicSearch.PageInfo" /></param>
            <param name="count">总记录数</param>
            <param name="isGetTotalCount">是否获取总页数，默认是true</param>
            <returns>一个待查询的结果集</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.GetByPage(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.String,System.String,System.Int32@,System.Boolean)">
            <summary>
                分页查询
            </summary>
            <param name="exp">查询表达式</param>
            <param name="skipCount">跳过的记录数</param>
            <param name="pageSize">每页记录数</param>
            <param name="sort">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="count">总记录数</param>
            <param name="isGetTotalCount">是否获取总页数，默认是true</param>
            <returns>一个待查询的结果集</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.GetByPage(System.Linq.IQueryable{`0},SuperGMS.DB.EFEx.DynamicSearch.PageInfo,System.Int32@)">
            <summary>
            分页查询
            </summary>
            <param name="query">待查询的结果集</param>
            <param name="pageInfo">分页信息<see cref="T:SuperGMS.DB.EFEx.DynamicSearch.PageInfo" /></param>
            <param name="count">总记录数</param>
            <returns>一个待查询的结果集</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.GetByPage(SuperGMS.DB.EFEx.DynamicSearch.SearchParameters,System.String)">
            <summary>
            分页查询
            如果T中有OraModel，并且查询总记录数，并且查询条件都隶属于OraModel，则使用单表查询
            </summary>
            <param name="searchParameters">查询参数 <see cref="T:SuperGMS.DB.EFEx.DynamicSearch.SearchParameters" /></param>
            <param name="sqlwhere">字符串的查询条件</param>
            <returns>一个待查询的结果集</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.GetByID(System.Object[])">
            <summary>
            通过主键获取一个对象，如果是组合主键，必须按照主键顺序填写
            </summary>
            <param name="keyValue">主键值</param>
            <returns>如果找到则返回该表对象(并被EF跟踪),否则返回null</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            根据一个表达式获取一个对象
            </summary>
            <param name="exp">查询表达式</param>
            <param name="isTrackEntity">是否跟踪实体(默认跟踪)</param>
            <returns>该表对象</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.GetAll(System.Boolean)">
            <summary>
            获取所有数据
            警告：此方法慎用
            </summary>
            <param name="isTrackEntity">是否跟踪实体(默认不跟踪)</param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.GetByQuery(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            根据表达式获取一个泛型对象集合，已连接数据库
            </summary>
            <param name="exp">查询表达式</param>
            <param name="isTrackEntity">是否跟踪实体(默认跟踪)</param>
            <returns>结果集</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.GetQueryableByQuery(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            根据表达式获取一个泛型对象集合，未连接数据库，需要使用ToList方法查询数据库转换成实体对象集合
            </summary>
            <param name="exp">查询表达式</param>
            <param name="isTrackEntity">是否跟踪实体(默认跟踪)</param>
            <returns>一个待查询的结果集</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.Insert(`0)">
            <summary>
                插入一个对象
            </summary>
            <param name="entity">要插入的对象</param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.BatchInsert(`0[])">
            <inheritdoc />
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.Update(`0,System.Func{`0,System.Boolean})">
            <summary>
            更新一个对象
            </summary>
            <param name="entity">此对象必须在当前DbContext中获取出来的对象</param>
            <param name="predicate">更新时在本地内存中查找,解决在同一个dbContext中多次查询相同的实体对象进行操作的问题</param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.BatchUpdate(`0[])">
            <inheritdoc />
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.Delete(`0)">
            <summary>
                删除一个对象
            </summary>
            <param name="entity">此对象必须在当前DbContext中获取出来的对象</param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.BatchDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                删除一组满足查询表达式的对象
            </summary>
            <param name="exp">删除表达式</param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.Delete(System.Object[])">
            <summary>
                根据主键删除一个对象
            </summary>
            <param name="keyValue">根据主键删除</param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.SqlQuery(System.String,System.Object[])">
            <summary>
                传递SQL来执行获取实体
                例：
                <![CDATA[
            SqlQuery<Post>("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);
            SqlQuery<Post>("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
            ]]>
            </summary>
            <param name="sqlKey">sqlKey</param>
            <param name="parameters">SQL中所要替换的参数值</param>
            <returns>List</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.ExecuteSqlCommand(System.String,System.Object[])">
            <summary>
            ExecuteSqlCommand
            </summary>
            <param name="sqlKey">sqlKey</param>
            <param name="parameters">parameters</param>
            <returns>int</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.GetPropNameBySqlWhere(System.String[])">
            <summary>
            用正则过滤出来真正的列名, 正则可能会不完整
            </summary>
            <param name="sqlWhereCondition">sqlWhereCondition</param>
            <returns>string[]</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFCrudRepository`1.GetSingleTableQuickCount(SuperGMS.DB.EFEx.DynamicSearch.SearchParameters,System.String,SuperGMS.DB.AttributeEx.ViewOraModelAttribute)">
            <summary>
            单表统计总数，解决Count 性能问题，如果所查询的内容都在单表字段里，则不需要走原视图查询
            根据之前的日订单量自动决定是否使用多线程查询合并
            </summary>
            <param name="searchParameters">searchParameters</param>
            <param name="sqlwhere">sqlwhere</param>
            <param name="attr">attr</param>
        </member>
        <member name="T:SuperGMS.DB.EFEx.ICrudRepository`1">
            <summary>
            ICrudRepository
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.GetByPage(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SuperGMS.DB.EFEx.DynamicSearch.PageInfo,System.Int32@,System.Boolean)">
            <summary>
             根据条件查询 并且分页，返回总记录数
            </summary>
            <param name="exp">查询表达式</param>
            <param name="pageInfo">分页信息<see cref="T:SuperGMS.DB.EFEx.DynamicSearch.PageInfo" /></param>
            <param name="count">总记录数</param>
            <param name="isGetTotalCount">是否获取总页数，默认是true</param>
            <returns>一个待查询的结果集</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.GetByPage(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.String,System.String,System.Int32@,System.Boolean)">
            <summary>
            分页查询
            </summary>
            <param name="exp">查询表达式</param>
            <param name="skipCount">跳过的记录数</param>
            <param name="pageSize">每页记录数</param>
            <param name="sort">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="count">总记录数</param>
            <param name="isGetTotalCount">是否获取总页数，默认是true</param>
            <returns>一个待查询的结果集</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.GetByPage(System.Linq.IQueryable{`0},SuperGMS.DB.EFEx.DynamicSearch.PageInfo,System.Int32@)">
            <summary>
            分页查询
            </summary>
            <param name="query">待查询的结果集</param>
            <param name="pageInfo">分页信息<see cref="T:SuperGMS.DB.EFEx.DynamicSearch.PageInfo" /></param>
            <param name="count">总记录数</param>
            <returns>一个待查询的结果集</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.GetByPage(SuperGMS.DB.EFEx.DynamicSearch.SearchParameters,System.String)">
            <summary>
            分页查询
            如果T中有OraModel，并且查询总记录数，并且查询条件都隶属于OraModel，则使用单表查询
            </summary>
            <param name="searchParameters">查询参数 <see cref="T:SuperGMS.DB.EFEx.DynamicSearch.SearchParameters" /></param>
            <param name="sqlwhere">字符串的查询条件</param>
            <returns>一个待查询的结果集</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.GetByID(System.Object[])">
            <summary>
            通过主键获取一个对象，如果是组合主键，必须按照主键顺序填写
            </summary>
            <param name="keyValue">主键值</param>
            <returns>如果找到则返回该表对象(并被EF跟踪),否则返回null</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            根据一个表达式获取一个对象
            </summary>
            <param name="exp">查询表达式</param>
            <param name="isTrackEntity">是否跟踪实体(默认跟踪)</param>
            <returns>该表对象</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.GetAll(System.Boolean)">
            <summary>
            获取所有数据
            警告：此方法慎用
            </summary>
            <param name="isTrackEntity">是否跟踪实体(默认不跟踪)</param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.GetByQuery(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            根据表达式获取一个泛型对象集合，已连接数据库
            </summary>
            <param name="exp">查询表达式</param>
            <param name="isTrackEntity">是否跟踪实体(默认跟踪)</param>
            <returns>结果集</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.GetQueryableByQuery(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
                根据表达式获取一个泛型对象集合，未连接数据库，需要使用ToList方法查询数据库转换成实体对象集合
            </summary>
            <param name="exp">查询表达式</param>
            <param name="isTrackEntity">是否跟踪实体(默认跟踪)</param>
            <returns>一个待查询的结果集</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.Insert(`0)">
            <summary>
                插入一个对象
            </summary>
            <param name="entity">要插入的对象</param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.BatchInsert(`0[])">
            <summary>
                插入多个对象
            </summary>
            <param name="entites">要插入的对象</param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.Update(`0,System.Func{`0,System.Boolean})">
            <summary>
                更新一个对象
            </summary>
            <param name="entity">此对象必须在当前DbContext中获取出来的对象</param>
            <param name="predicate">更新时在本地内存中查找,解决在同一个dbContext中多次查询相同的实体对象进行操作的问题</param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.BatchUpdate(`0[])">
            <summary>
                批量更新对象
            </summary>
            <param name="entites">此对象必须在当前DbContext中获取出来的对象</param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.BatchDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                删除一组满足查询表达式的对象
            </summary>
            <param name="exp">删除表达式</param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.Delete(System.Object[])">
            <summary>
                根据主键删除一个对象
            </summary>
            <param name="keyValue">根据主键删除</param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.Delete(`0)">
            <summary>
                删除一个对象
            </summary>
            <param name="entity">此对象必须在当前DbContext中获取出来的对象</param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.SqlQuery(System.String,System.Object[])">
            <summary>
            传递SQL来执行获取实体(不做实体跟踪)
            </summary>
            <param name="sqlKey">sqlKey</param>
            <param name="parameters">parameters</param>
            <returns>list</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.ICrudRepository`1.ExecuteSqlCommand(System.String,System.Object[])">
            <summary>
            执行参数化脚本
            </summary>
            <param name="sqlKey">sqlKey</param>
            <param name="parameters">parameters</param>
            <returns>int</returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository">
            <summary>
            ISqlBaseRepository
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.QueryDataSetBySql(System.String,System.Data.CommandType)">
            <summary>
            根据Sql查询返回DataSet
            </summary>
            <param name="sql"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.QueryByPageSql(System.String,SuperGMS.DB.EFEx.DynamicSearch.SearchParameters)">
            <summary>
            Query
            </summary>
            <param name="sql">sql</param>
            <param name="searchParameters">查询条件</param>
            <returns>list</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.QueryByPageSql``1(System.String,SuperGMS.DB.EFEx.DynamicSearch.SearchParameters)">
            <summary>
            Query
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="sql">sql</param>
            <param name="searchParameters">查询条件</param>
            <returns>list</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.QueryPageByParametricSql``1(System.String,SuperGMS.DB.EFEx.DynamicSearch.PageInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Parametric Query ,执行参数化SQL分页查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="pageInfo"></param>
            <param name="paramsDic"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.QuerySql``1(System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            Query
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="sql">sql</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType">commandType</param>
            <returns>list</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.QuerySql``1(System.Data.IDbTransaction,System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            Query
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="trans">trans</param>
            <param name="sql">sql</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType">commandType</param>
            <returns>list</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.QuerySql(System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            Query
            </summary>
            <param name="sql">sql</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType"></param>
            <returns>list</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.QuerySql(System.Data.IDbTransaction,System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            Query
            </summary>
            <param name="trans">trans</param>
            <param name="sql">sql</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType"></param>
            <returns>list</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.ExecuteScalarSql``1(System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            ExecuteScalar
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="sql">sql</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType"></param>
            <returns>TValue</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.ExecuteScalarSql``1(System.Data.IDbTransaction,System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            ExecuteScalar
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="trans">trans</param>
            <param name="sql">sql</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType"></param>
            <returns>Tvalue</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.ExecuteScalarSql(System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            ExecuteScalar
            </summary>
            <param name="sql">sql</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType"></param>
            <returns>dynamic</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.ExecuteScalarSql(System.Data.IDbTransaction,System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            ExecuteScalar
            </summary>
            <param name="trans">trans</param>
            <param name="sql">sql</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType"></param>
            <returns>dynamic</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.ExecuteNoQuerySql(System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            ExecuteNoQuery
            </summary>
            <param name="sql">sql</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType">commandType</param>
            <returns>int</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.ExecuteNoQuerySql(System.Data.IDbTransaction,System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            ExecuteNoQuery
            </summary>
            <param name="trans">trans</param>
            <param name="sql">sql</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType">commandType</param>
            <returns>int</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.ExecuteNoQuerySql(System.String,System.Object,System.Data.CommandType)">
            <summary>
            dapper底层函数
            </summary>
            <param name="sql">sql</param>
            <param name="param">params</param>
            <param name="commandType">commandType</param>
            <returns>int</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.ExecuteNoQuerySql(System.Data.IDbTransaction,System.String,System.Object,System.Data.CommandType)">
            <summary>
            dapper底层函数
            </summary>
            <param name="trans">trans</param>
            <param name="sql">sql</param>
            <param name="param">params</param>
            <param name="commandType">commandType</param>
            <returns>int</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.GetTransaction">
            <summary>
            Get Transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlBaseRepository.DisposeTransaction(System.Data.IDbTransaction)">
            <summary>
            Disponse Transaction
            </summary>
            <param name="trans"></param>
        </member>
        <member name="T:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository">
            <summary>
            ISqlRepository
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.QueryDataSetBySqlKey(System.String,System.Data.CommandType)">
            <summary>
            根据Sql查询返回DataSet
            </summary>
            <param name="sql"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.QueryByPageSqlKey``1(System.String,SuperGMS.DB.EFEx.DynamicSearch.SearchParameters)">
            <summary>
            Query
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="sqlKey">sqlKey</param>
            <param name="searchParameters">查询条件</param>
            <returns>list</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.QueryByPageSqlKey(System.String,SuperGMS.DB.EFEx.DynamicSearch.SearchParameters)">
            <summary>
            Query
            </summary>
            <param name="sqlKey">sqlKey</param>
            <param name="searchParameters">查询条件</param>
            <returns>list</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.QuerySqlKey(System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            Query
            </summary>
            <param name="sqlKey">sqlKey</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType"></param>
            <returns>list</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.QuerySqlKey(System.Data.IDbTransaction,System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            Query
            </summary>
            <param name="trans">trans</param>
            <param name="sqlKey">sqlKey</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType"></param>
            <returns>list</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.QuerySqlKey``1(System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            Query
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="sqlKey">sqlKey</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType"></param>
            <returns>list</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.QuerySqlKey``1(System.Data.IDbTransaction,System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            Query
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="trans">trans</param>
            <param name="sqlKey">sqlKey</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType"></param>
            <returns>list</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.ExecuteScalarSqlKey``1(System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            ExecuteScalar
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="sqlKey">sqlKey</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType"></param>
            <returns>TValue</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.ExecuteScalarSqlKey``1(System.Data.IDbTransaction,System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            ExecuteScalar
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="trans">trans</param>
            <param name="sqlKey">sqlKey</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType"></param>
            <returns>TValue</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.ExecuteScalarSqlKey(System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            ExecuteScalar
            </summary>
            <param name="sqlKey">sqlKey</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType"></param>
            <returns>dynamic</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.ExecuteScalarSqlKey(System.Data.IDbTransaction,System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            ExecuteScalar
            </summary>
            <param name="trans">trans</param>
            <param name="sqlKey">sqlKey</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType"></param>
            <returns>dynamic</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.ExecuteNoQuerySqlKey(System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            ExecuteNoQuery
            </summary>
            <param name="sqlKey">sqlKey</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType">commandType</param>
            <returns>int</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.ExecuteNoQuerySqlKey(System.Data.IDbTransaction,System.String,System.String[],System.Object[],System.Data.CommandType)">
            <summary>
            ExecuteNoQuery
            </summary>
            <param name="trans">trans</param>
            <param name="sqlKey">sqlKey</param>
            <param name="paramsList">paramsList</param>
            <param name="valuesList">valuesList</param>
            <param name="commandType">commandType</param>
            <returns>int</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.ExecuteNoQuerySqlKey(System.String,System.Object,System.Data.CommandType)">
            <summary>
            dapper底层函数
            </summary>
            <param name="sqlKey">sqlKey</param>
            <param name="param">params</param>
            <param name="commandType">commandType</param>
            <returns>int</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.ExecuteNoQuerySqlKey(System.Data.IDbTransaction,System.String,System.Object,System.Data.CommandType)">
            <summary>
            dapper底层函数
            </summary>
            <param name="trans">trans</param>
            <param name="sqlKey">sqlKey</param>
            <param name="param">params</param>
            <param name="commandType">commandType</param>
            <returns>int</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.GetSqlByKey(System.String)">
            <summary>
            获取配置的sql
            </summary>
            <param name="sqlKey"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.CrudRepository.ISqlRepository.ConvertToSqlWhere(SuperGMS.DB.EFEx.DynamicSearch.SearchParameters,SuperGMS.DB.EFEx.DbType)">
            <summary>
            根据QueryModel组织sqlWhere语句,如果有字段前缀的话,需要提前增加进来
            </summary>
            <param name="searchParameters"></param>
            <param name="dbType"></param>
            <returns>where语句</returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.DbContextFactory`1">
            <summary>
            自己管理释放内存
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DbContextFactory`1.GetUnitOfWork(System.String,SuperGMS.UserSession.UserContext)">
            <summary>
            根据系统ID, 匹配用户已授权的系统, 获取数据库信息
            </summary>
            <param name="sysId"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DbContextFactory`1.GetUnitOfWork(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            直接根据数据库信息获取
            </summary>
            <param name="ip"></param>
            <param name="uName"></param>
            <param name="uPass"></param>
            <param name="dbName"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.DBContextOptionsLoader">
            <summary>
            DBContextOptionsManager
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DBContextOptionsLoader.IsMemoryDb">
            <summary>
            判断是否内存数据库，如果是则认为是在测试
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DBContextOptionsLoader.Initlize(SuperGMS.DB.EFEx.IContextOptionBuilderFactory)">
            <summary>
            基于EF的单元测试可以通过初始化自己的OptionBuilder
            </summary>
            <param name="optionFactory"></param>
        </member>
        <member name="T:SuperGMS.DB.EFEx.DbInfo">
            <summary>
            DBInfo
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DbInfo.DbContextName">
            <summary>
            Gets or sets 数据模型名称
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DbInfo.DbType">
            <summary>
            Gets or sets Dbtype
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DbInfo.DbName">
            <summary>
            Gets or sets 数据库名称
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DbInfo.UserName">
            <summary>
            Gets or sets 数据库登录名
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DbInfo.Pwd">
            <summary>
            Gets or sets 登录密码
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DbInfo.Ip">
            <summary>
            Gets or sets 数据库Ip
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DbInfo.Port">
            <summary>
            Gets or sets 端口
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DbInfo.CommandTimeout">
            <summary>
            数据执行时间
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DbInfo.Other">
            <summary>
             Gets or sets 其他特殊的附加信息
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DbInfo.ToString">
            <summary>
             tostring
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.InMemoryDBContextOptionBuilder">
            <summary>
            InMemoryDBContextOptionBuilder
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.InMemoryDBContextOptionBuilder.CreateOptionsBuilder``1(System.String)">
            <summary>
            CreateOptionsBuilder
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="connectionString">connectionString</param>
            <returns>DbContextOptionsBuilder</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.InMemoryDBContextOptionBuilder.GetConnectionString(SuperGMS.DB.EFEx.DbInfo)">
            <summary>
             返回连接字符串
            </summary>
            <param name="dbInfo">dbInfo</param>
            <returns>string</returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.MySqlDBContextOptionBuilder">
            <summary>
            MySqlDBContextOptionBuilder
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.MySqlDBContextOptionBuilder.GetDbConnectionString(SuperGMS.DB.EFEx.DbInfo)">
            <summary>
            根据数据类型获取连接字符串
            </summary>
            <param name="dbInfo">dbInfo</param>
            <returns>string</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.MySqlDBContextOptionBuilder.CreateOptionsBuilder``1(System.String)">
            <summary>
            CreateOptionsBuilder
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="connectionString">connectionString</param>
            <returns>DbContextOptionsBuilder</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.MySqlDBContextOptionBuilder.GetConnectionString(SuperGMS.DB.EFEx.DbInfo)">
            <summary>
            获取数据库连接字符串
            </summary>
            <param name="dbInfo">dbInfo</param>
            <returns>string</returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.OracleDBContextOptionBuilder">
            <summary>
            OracleDBContextOptionBuilder
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.OracleDBContextOptionBuilder.GetConnectionString(SuperGMS.DB.EFEx.DbInfo)">
            <summary>
            GetConnectionString
            </summary>
            <param name="dbInfo"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.OracleDBContextOptionBuilder.GetDbConnectionString(SuperGMS.DB.EFEx.DbInfo)">
            <summary>
            根据数据类型获取连接字符串
            </summary>
            <param name="dbInfo">dbInfo</param>
            <returns>string</returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.PostgresqlDBContextOptionBuilder">
             <summary>
            
             <see cref="T:SuperGMS.DB.EFEx.PostgresqlDBContextOptionBuilder" langword="" />
             </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.PostgresqlDBContextOptionBuilder.GetDbConnectionString(SuperGMS.DB.EFEx.DbInfo)">
            <summary>
            根据数据类型获取连接字符串
            </summary>
            <param name="dbInfo">dbInfo</param>
            <returns>string</returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.SqlServerDBContextOptionBuilder">
            <summary>
            SqlServerDBContextOptionBuilder
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.SqlServerDBContextOptionBuilder.GetDbConnectionString(SuperGMS.DB.EFEx.DbInfo)">
            <summary>
            根据数据类型获取连接字符串
            </summary>
            <param name="dbInfo">dbInfo</param>
            <returns>string</returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.DataAccessLayerType">
            <summary>
            数据访问层的类型
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.DbType">
            <summary>
            DataBaseType
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.DynamicSearch.DbColumnMaps">
            <summary>
            DbContext 中的属性 与 数据库列的对应关系 , 用作SearchParameter 转换 Sql 使用.
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.DbColumnMaps.InitDbContextFiledMaps``1">
            <summary>
            根据DbContext 获取字段映射关系
            注意：已知问题: 如果在.net core 2.0版本，视图未定义主键会引起异常。
                 .netcore 2.1 版本已经修改该bug.
            </summary>
            <returns>映射表</returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.DynamicSearch.Model.ConditionItem">
            <summary>
                用于存储查询条件的单元
                Add by Grant 2014-3-27
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.Model.ConditionItem.#ctor">
            <summary>
                默认构造函数
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.Model.ConditionItem.#ctor(System.String,SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod,System.Object)">
            <summary>
                传参构造函数
            </summary>
            <param name="field">查询字段，等于表的列名</param>
            <param name="method">查询方法<see cref="!:SuperGMS.EFEx.DynamicSearch.Model.QueryMethod" /></param>
            <param name="val">查询的值</param>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.Model.ConditionItem.Field">
            <summary>
                字段
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.Model.ConditionItem.Method">
            <summary>
                查询方式, 可传递 Equal(等于)  ,LessThan(小于), GreaterThan(大于),LessThanOrEqual(小于等于),GreaterThanOrEqual(大于等于),Contains(包含)
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.Model.ConditionItem.Value">
            <summary>
                值
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.Model.ConditionItem.Prefix">
            <summary>
                前缀，用于标记作用域
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.Model.ConditionItem.OrGroup">
            <summary>
                此值相同的一组Condition 会使用or 拼接起来 并和其他condition 使用and 连接
                orGroup是组外 or ，组内仍然是 and
                当需要使用((A='1' and B='2') or (A='11' and B='22') or  (C='3'))操作,则此5个表达式值需要维护为 x,1和x,1和x,2和x,2和x
            只支持一个逗号
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.DynamicSearch.Model.PageResult`1">
            <summary>
            rpc返回接口的泛型对象, 继承此对象
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod">
            <summary>
                Html表单元素的检索方式
                Add by Grant 2014-3-27
            </summary>
        </member>
        <member name="F:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod.Equal">
            <summary>
                等于
            </summary>
        </member>
        <member name="F:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod.LessThan">
            <summary>
                小于
            </summary>
        </member>
        <member name="F:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod.GreaterThan">
            <summary>
                大于
            </summary>
        </member>
        <member name="F:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod.LessThanOrEqual">
            <summary>
                小于等于
            </summary>
        </member>
        <member name="F:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod.GreaterThanOrEqual">
            <summary>
                大于等于
            </summary>
        </member>
        <member name="F:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod.DateBlock">
            <summary>
                输入一个时间获取当前天的时间块操作, ToSql未实现，仅实现了IQueryable
            </summary>
        </member>
        <member name="F:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod.NotEqual">
            <summary>
                不等于
            </summary>
        </member>
        <member name="F:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod.StartsWith">
            <summary>
                开始于
            </summary>
        </member>
        <member name="F:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod.EndsWith">
            <summary>
                结束于
            </summary>
        </member>
        <member name="F:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod.Contains">
            <summary>
                处理Like的问题
            </summary>
        </member>
        <member name="F:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod.StdIn">
            <summary>
                处理In的问题
            </summary>
        </member>
        <member name="F:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod.StdNotIn">
            <summary>
                处理Not In的问题
            </summary>
        </member>
        <member name="F:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod.NotLike">
            <summary>
            不包涵
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryModel">
            <summary>
                用户自动收集搜索条件的Model
                Add by Grant 2014-3-27
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryModel.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.Model.QueryModel.Items">
            <summary>
                查询条件
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.DynamicSearch.PageInfo">
            <summary>
            分页实体
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.PageInfo.CurrentPage">
            <summary>
                当前页 , 和SkipCount不能同时赋值, 否则以SkipCount为准
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.PageInfo.SkipCount">
            <summary>
                跳过条数,和CurrentPage不能同时赋值, 否则以SkipCount为准
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.PageInfo.PageSize">
            <summary>
                页大小
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.PageInfo.SortField">
            <summary>
                排序字段
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.PageInfo.SortDirection">
            <summary>
                升序 降序
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.PageInfo.IsPaging">
            <summary>
                是否分页, 因为性能原因,此处设置false无效,为了提高性能必须分页,如果为了获取更多条数据,可以增大PageSize 到一个已知的最大值
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.PageInfo.IsGetTotalCount">
            <summary>
                是否获取总条数，默认是False，如果为了提高性能，而不关注总条数，可以将此值设置为false。因为获取总条数非常!非常！非常！消耗时间 add by Grant 2016-11-9
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.PageInfo.TotalCount">
            <summary>
                是否分页
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.DynamicSearch.QueryableExtensions">
            <summary>
                对IQueryable的扩展方法
                add by Grant 2014-3-27
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.QueryableExtensions.Where``1(System.Linq.IQueryable{``0},SuperGMS.DB.EFEx.DynamicSearch.Model.QueryModel,System.String)">
            <summary>
                重载IQueryable 的Where方法，以便支持QueryModel 参数
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="table">IQueryable的查询对象</param>
            <param name="model">QueryModel对象</param>
            <param name="prefix">使用前缀区分查询条件</param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
                排序
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="source">要排序的数据源</param>
            <param name="value">排序依据（加空格）排序方式</param>
            <returns>IOrderedQueryable</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.QueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
                Linq动态排序再排序
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="source">要排序的数据源</param>
            <param name="value">排序依据（加空格）排序方式</param>
            <returns>IOrderedQueryable</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.QueryableExtensions.ApplyOrder``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
                排序方法
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="source">集合</param>
            <param name="property">字段名</param>
            <param name="methodName">排序方法</param>
            <returns>排过序的对象集合</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.QueryableExtensions.Where``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{SuperGMS.DB.EFEx.DynamicSearch.Model.ConditionItem},System.String)">
            <summary>
                内部方法提供给Where方法调用，使用了 prefix参数过滤查询条件
            </summary>
            <typeparam name="T">实体对象</typeparam>
            <param name="table">集合</param>
            <param name="items">查询条件集合</param>
            <param name="prefix">属性前缀，如果使用了属性前缀则只会过滤满足属性前缀的条件集合</param>
            <returns>对象集合</returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.DynamicSearch.QueryableSearcher`1">
            <summary>
                查询方法，提供给 <see cref="!:SuperGMS.EFEx.DynamicSearch.QueryableExtensions" />调用
                add by Grant 2014-3-27
            </summary>
            <typeparam name="T">对象</typeparam>
        </member>
        <member name="F:SuperGMS.DB.EFEx.DynamicSearch.QueryableSearcher`1.ExpressionDict">
            <summary>
                组织最小的表达式用的连接符字典,left 是属性表达式，Right 是值
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.QueryableSearcher`1.#ctor">
            <summary>
                空构造方法
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.QueryableSearcher`1.#ctor(System.Linq.IQueryable{`0},System.Collections.Generic.IEnumerable{SuperGMS.DB.EFEx.DynamicSearch.Model.ConditionItem})">
            <summary>
                带查询内容和查询条件的构造方法
            </summary>
            <param name="table">待查询内容集合</param>
            <param name="items">查询条件</param>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.QueryableSearcher`1.Items">
            <summary>
                查询条件
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.QueryableSearcher`1.Table">
            <summary>
                查询源
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.QueryableSearcher`1.Search">
            <summary>
                查询调用方法，构造完参数后调用此方法可以获取查询结果
            </summary>
            <returns>待查询集合</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.QueryableSearcher`1.GetExpressoinBody(System.Linq.Expressions.ParameterExpression,System.Collections.Generic.IEnumerable{SuperGMS.DB.EFEx.DynamicSearch.Model.ConditionItem})">
            <summary>
                构建表达式主体
            </summary>
            <param name="param">表达式命名</param>
            <param name="items">查询条件</param>
            <returns>表达式主体</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.QueryableSearcher`1.GetGroupExpression(System.Linq.Expressions.ParameterExpression,System.Collections.Generic.IEnumerable{SuperGMS.DB.EFEx.DynamicSearch.Model.ConditionItem},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                获取分组表达式
            </summary>
            <param name="param">表达式命名</param>
            <param name="items">查询条件集合</param>
            <param name="func">操作符</param>
            <returns>分组表达式</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.QueryableSearcher`1.GetExpression(System.Linq.Expressions.ParameterExpression,SuperGMS.DB.EFEx.DynamicSearch.Model.ConditionItem)">
            <summary>
                获取最小的表达式组合
            </summary>
            <param name="param">表达式命名</param>
            <param name="item">查询条件</param>
            <returns>最小的表达式组合</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.QueryableSearcher`1.GetPropertyLambdaExpression(SuperGMS.DB.EFEx.DynamicSearch.Model.ConditionItem,System.Linq.Expressions.ParameterExpression)">
            <summary>
                构建属性表达式,支持多级拆分 如：c.Users.Proiles.UserId
            </summary>
            <param name="item">查询条件</param>
            <param name="param">属性表达式</param>
            <returns>Lambda表达式</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.QueryableSearcher`1.ChangeType(System.Object,System.Type)">
            <summary>
                类型转换，支持非空类型与可空类型之间的转换
            </summary>
            <param name="value">原始对象</param>
            <param name="conversionType">目标对象类型</param>
            <returns>转换后的对象</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.QueryableSearcher`1.ChangeTypeToExpression(SuperGMS.DB.EFEx.DynamicSearch.Model.ConditionItem,System.Type)">
            <summary>
                转换SearchItem中的Value的类型，为表达式树
            </summary>
            <param name="item">查询条件</param>
            <param name="conversionType">目标类型</param>
        </member>
        <member name="T:SuperGMS.DB.EFEx.DynamicSearch.SearchParameters">
            <summary>
                查询参数，用来动态构建查询表达式树的实体
                add by Grant 2014-3-27
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.SearchParameters.#ctor">
            <summary>
                构造一个空的查询条件
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.SearchParameters.QueryModel">
            <summary>
                具体的查询条件
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.DynamicSearch.SearchParameters.PageInfo">
            <summary>
                分页参数
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.SearchParameters.GetMethodByJqGridOp(System.String)">
            <summary>
                 过滤参数转换成查询条件枚举
                [{ oper:'eq', text:'equal'},{ oper:'ne', text:'not equal'},{ oper:'lt', text:'less'},
                { oper:'le', text:'less or equal'},{ oper:'gt', text:'greater'},{ oper:'ge', text:'greater or equal'},
                { oper:'bw', text:'begins with'},{ oper:'bn', text:'does not begin with'},{ oper:'in', text:'is in'},
                { oper:'ni', text:'is not in'},{ oper:'ew', text:'ends with'},{ oper:'en', text:'does not end with'},
                { oper:'cn', text:'contains'},{ oper:'nc', text:'does not contain'}]
            补充
                 { oper:'mcn', text:'contains'},{ oper:'mcn', text:'more like'}
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.SearchParameters.GetSqlWhere">
            <summary>
            根据QueryModel组织sqlWhere语句,如果有字段前缀的话,需要提前增加进来
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.SearchParameters.GetParameters">
            <summary>
            获取QueryModel的参数列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.SearchParameters.ConvertMethodToSql(SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod,System.Object)">
            <summary>
            将Method转换成sql语法的查询语句
            </summary>
            <param name="method"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.SearchParameters.BuildEmptySearch">
            <summary>
            处理空值查询，null值查询
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.SearchParameters.IsSimple(System.Type)">
            <summary>
            是否是简单类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.DynamicSearch.TypeUtil">
            <summary>
                Type类的处理工具类
                Add By Grant 2014-3-27
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DynamicSearch.TypeUtil.GetUnNullableType(System.Type)">
            <summary>
                如果类型是 类型? 或者 Nullable  类型的，直接转换成 原始类型
            </summary>
            <param name="conversionType">可Null类型</param>
            <returns>实际类型</returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.IContextOptionBuilderFactory">
            <summary>
            IContextOptionFactory
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.DapperDBContext">
            <summary>
            GrantDapperDBContext
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.DapperDBContext.GetRepository">
            <summary>
            获取执行Sql的Repository
            </summary>
            <returns>ISqlRepository</returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.EFDbContext">
            <summary>
            GrantDBContext
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFDbContext.GetRepository``1">
            <summary>
            获取EF的 Repository
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFDbContext.Commit">
            <summary>
                是当前DBContext 提交到数据库中
            </summary>
            <exception cref="T:SuperGMS.ExceptionEx.BusinessException">数据已经被更改，请重新加载操作</exception>
            <exception cref="T:SuperGMS.ExceptionEx.BusinessException">DbUpdateException 提取 InnerException 抛出，开发更容易看懂</exception>
            <exception cref="T:SuperGMS.ExceptionEx.BusinessException">DbEntityValidationException 提取EntityValidationErrors 抛出，开发更容易看懂</exception>
        </member>
        <member name="M:SuperGMS.DB.EFEx.EFDbContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.MyDbContext.EFDbContextExtend">
             <summary>
            
             <see cref="T:SuperGMS.DB.EFEx.MyDbContext.EFDbContextExtend" langword="" />
             </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.MyDbContext.EFDbContextExtend.EFChangeInfo.TableName">
            <summary>
            修改表名
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.MyDbContext.EFDbContextExtend.EFChangeInfo.Changes">
            <summary>
            修改情况
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.MyDbContext.EFDbContextExtend.ChangeValue.EntityState">
            <summary>
            变化类型
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.MyDbContext.EFDbContextExtend.ChangeValue.Field">
            <summary>
            修改字段名
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.MyDbContext.EFDbContextExtend.ChangeValue.OldValue">
            <summary>
            修改前的值
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.MyDbContext.EFDbContextExtend.ChangeValue.NewValue">
            <summary>
            修改后的值
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.GrantDbContext.IDapperDbContext">
            <summary>
            IGrantDapperDbContext
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.GrantDbContext.IDapperDbContext.GetRepository">
            <summary>
            GetRepository()
            </summary>
            <returns>ISqlRepository</returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.GrantDbContext.IEFDbContext">
            <summary>
            IGrantEFDbContext
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.IDbContext">
            <summary>
            IGrantDbContext
            modified by mark add Idisposable interface
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.GrantDbFactory.DbBase">
            <summary>
            DbBase
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.GrantDbFactory.DbBase.Prefix">
            <summary>
            参数前缀 如：@，#
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.GrantDbFactory.DbBase.DisposeTransaction(System.Data.IDbTransaction)">
            <summary>
            释放事务
            </summary>
            <param name="trans"></param>
        </member>
        <member name="M:SuperGMS.DB.EFEx.GrantDbFactory.DbBase.getDbConnection">
            <summary>
            根据不同的数据库生成对应得连接对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.GrantDbFactory.DbBase.ConvertToSqlWhere(SuperGMS.DB.EFEx.DynamicSearch.SearchParameters,SuperGMS.DB.EFEx.DbType)">
            <summary>
            根据QueryModel组织sqlWhere语句,如果有字段前缀的话,需要提前增加进来
            如果是Dapper 需要转换成
            </summary>
            <returns>Where 语句</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.GrantDbFactory.DbBase.GetDynamicParametersBySearchParameter(SuperGMS.DB.EFEx.DynamicSearch.SearchParameters)">
            <summary>
            根据SearchParamerters 的 FiledName 转换成数据库的 ColumnName
            </summary>
            <param name="searchParameters">查询参数</param>
            <returns>Dapper动态参数</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.GrantDbFactory.DbBase.GetQueryCloumn(SuperGMS.DB.EFEx.DynamicSearch.Model.ConditionItem)">
            <summary>
            转换列
            </summary>
            <param name="senItem">查询条件</param>
            <returns>查询列名</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.GrantDbFactory.DbBase.ConvertMethodToSql(SuperGMS.DB.EFEx.DynamicSearch.Model.QueryMethod,System.Object)">
            <summary>
            将Method转换成Dapper语法的查询语句
            </summary>
            <param name="method">方法</param>
            <param name="value">值</param>
            <returns>条件</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.GrantDbFactory.DbBase.GetPageSql(SuperGMS.DB.EFEx.DynamicSearch.SearchParameters,System.String)">
            <summary>
            获取一个分页Sql
            </summary>
            <param name="searchParameters">查询条件</param>
            <param name="sql">查询主sql</param>
            <returns>分页sql</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.GrantDbFactory.DbBase.QueryByPageSqlKey``1(System.String,SuperGMS.DB.EFEx.DynamicSearch.SearchParameters)">
            <summary>
            使用SearchParameter查询并分页
            先使用SearchParamerters 创建带分页的查询语句,以及动态查询参数
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="sqlKey">key</param>
            <param name="searchParameters">查询条件</param>
            <returns>列表</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.GrantDbFactory.DbBase.QueryPageByParametricSql``1(System.String,SuperGMS.DB.EFEx.DynamicSearch.PageInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Parametric Query ,执行参数化SQL分页查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="pageInfo"></param>
            <param name="paramsDic"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.GrantDbFactory.DbBase.GetSqlBySearchParameter(System.String,SuperGMS.DB.EFEx.DynamicSearch.SearchParameters)">
            <summary>
            使用SearchParamerters 自动追加 sql 的 where 条件, 并用占位符处理value   例: `ORDER_ID`=@OrderId
            并根据PageInfo信息生成sql分页内容
            </summary>
            <param name="sql">sqlkey</param>
            <param name="searchParameters">查询条件</param>
            <returns>返回一个组织好的sql语句</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.GrantDbFactory.DbBase.GetSqlByKey(System.String)">
            <summary>
            根据sqlKey获取sql
            </summary>
            <param name="sqlKey"></param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.GrantDbFactory.DBConnection">
            <summary>
            GrantDBConnection
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.GrantDbFactory.DBConnection.Dispose">
            <summary>
            后面改成连接池的释放
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.GrantDbFactory.MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.GrantDbFactory.MySql.Prefix">
            <summary>
            Gets mysql的参数前缀
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.GrantDbFactory.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.GrantDbFactory.PostgreSql">
             <summary>
            
             <see cref="T:SuperGMS.DB.EFEx.GrantDbFactory.PostgreSql" langword="" />
             </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.GrantDbFactory.PostgreSql.Prefix">
            <summary>
            参数前缀
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.GrantDbFactory.SqlPara">
            <summary>
            SqlPara
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.GrantDbFactory.SqlRepositoryManager">
            <summary>
            SqlRepositoryManager
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.GrantDbFactory.SqlServer">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.Pagination`1">
            <summary>
                分页类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SuperGMS.DB.EFEx.Pagination`1.PageList(System.Linq.IQueryable{`0},System.Int32,System.Int32,System.String,System.String,System.Int32@,System.Boolean)">
            <summary>
                分页，就是将已经整理的查询条件 IQueryable 再加上 skip，take 方法
            </summary>
            <param name="query"></param>
            <param name="skipCount"></param>
            <param name="pageSize"></param>
            <param name="sort">排序字段,如果是多字段排序,此字段记录为 "ID ASC,Name Desc" </param>
            <param name="dir">ASC/DESC,如果是多字段排序,此字段为空</param>
            <param name="count">总纪录数</param>
            <param name="isGetTotalCount">是否获取总页数，默认是true</param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.Pagination`1.OrderedQueryable(System.Linq.IQueryable{`0},System.String,System.String)">
            <summary>
            构建排序
            </summary>
            <param name="query"></param>
            <param name="sort"></param>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.Pagination`1.PagingListData``1(SuperGMS.DB.EFEx.DynamicSearch.SearchParameters,System.Collections.Generic.List{``0})">
            <summary>
            对List进行分页, 此方法会强制大小写匹配
            </summary>
            <typeparam name="Entity"></typeparam>
            <param name="seachParameters">查询条件</param>
            <param name="listProvince">泛型集合</param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.QueryFilterRule.QueryBuilder">
            <summary>
            Generic IQueryable filter implementation.  Based upon configuration of FilterRules 
            mapping to the data source.  When applied, acts as an advanced filter mechanism.
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.QueryFilterRule.QueryBuilder.ParseDatesAsUtc">
            <summary>
            Gets or sets a value indicating whether incoming dates in the filter should be parsed as UTC.
            </summary>
            <value>
              <c>true</c> if [parse dates as UTC]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SuperGMS.DB.EFEx.QueryFilterRule.QueryBuilder.BuildQuery``1(System.Collections.Generic.IList{``0},SuperGMS.DB.EFEx.QueryFilterRule.FilterRule,System.Boolean,System.String)">
            <summary>
            Gets the filtered collection after applying the provided filter rules.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="queryable">The queryable.</param>
            <param name="filterRule">The filter rule.</param>
            <param name="useIndexedProperty">Whether or not to use indexed property</param>
            <param name="indexedPropertyName">The indexable property to use</param>
            <returns>Filtered IQueryable</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.QueryFilterRule.QueryBuilder.BuildQuery``1(System.Linq.IQueryable{``0},SuperGMS.DB.EFEx.QueryFilterRule.FilterRule,System.Boolean,System.String)">
            <summary>
            Gets the filtered collection after applying the provided filter rules.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="queryable">The queryable.</param>
            <param name="filterRule">The filter rule.</param>
            <param name="useIndexedProperty">Whether or not to use indexed property</param>
            <param name="indexedPropertyName">The indexable property to use</param>
            <returns>Filtered IQueryable</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.QueryFilterRule.QueryBuilder.BuildQuery``1(System.Linq.IQueryable{``0},SuperGMS.DB.EFEx.QueryFilterRule.FilterRule,System.String@,System.Boolean,System.String)">
            <summary>
            Gets the filtered collection after applying the provided filter rules. 
            Returns the string representation for diagnostic purposes.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="queryable">The queryable.</param>
            <param name="filterRule">The filter rule.</param>
            <param name="parsedQuery">The parsed query.</param>
            <param name="useIndexedProperty">Whether or not to use indexed property</param>
            <param name="indexedPropertyName">The indexable property to use</param>
            <returns>Filtered IQueryable.</returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.QueryFilterRule.FilterRule">
            <summary>
            This class is used to define a hierarchical filter for a given collection.
            </summary>
        </member>
        <member name="P:SuperGMS.DB.EFEx.QueryFilterRule.FilterRule.Condition">
            <summary>
            Condition - acceptable values are "and" and "or".
            </summary>
            <value>
            The condition.
            </value>
        </member>
        <member name="P:SuperGMS.DB.EFEx.QueryFilterRule.FilterRule.Field">
            <summary>
            The name of the field that the filter applies to.
            </summary>
            <value>
            The field.
            </value>
        </member>
        <member name="P:SuperGMS.DB.EFEx.QueryFilterRule.FilterRule.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:SuperGMS.DB.EFEx.QueryFilterRule.FilterRule.Input">
            <summary>
            Gets or sets the input.
            </summary>
            <value>
            The input.
            </value>
        </member>
        <member name="P:SuperGMS.DB.EFEx.QueryFilterRule.FilterRule.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="P:SuperGMS.DB.EFEx.QueryFilterRule.FilterRule.Rules">
            <summary>
            Gets or sets nested filter rules.
            </summary>
            <value>
            The rules.
            </value>
        </member>
        <member name="P:SuperGMS.DB.EFEx.QueryFilterRule.FilterRule.Type">
            <summary>
            Gets or sets the type. Supported values are "integer", "double", "string", "date", "datetime", and "boolean".
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:SuperGMS.DB.EFEx.QueryFilterRule.FilterRule.Value">
            <summary>
            Gets or sets the value of the filter.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:SuperGMS.DB.EFEx.QueryFilterRule.FilterRule.Table">
            <summary>
            
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.QueryFilterRule.OperatorConverter">
            <summary>
            转换操作符
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.QueryFilterRule.OperatorConverter.CanConvert(System.Type)">
            <summary>
            
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.QueryFilterRule.OperatorConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            QT 操作符转换为当前组件操作符
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.QueryFilterRule.OperatorConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:SuperGMS.DB.EFEx.SuperGMSDBContext">
            <summary>
            GrantDBContext
            </summary>
        </member>
        <member name="T:SuperGMS.DB.EFEx.Udf.EntityKeyHelper">
            <summary>
            获取实体对象的主键值,使用了 延迟加载模式,并且使用了内存缓存提高性能
            代码来源 http://michaelmairegger.wordpress.com/2013/03/30/find-primary-keys-from-entities-from-dbcontext/
            </summary>
        </member>
        <member name="M:SuperGMS.DB.EFEx.Udf.EntityKeyHelper.GetKeyNames``1(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            获取主键名,增加了Lock,支持并发操作
            Add By Grant
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <returns>主键数组</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.Udf.EntityKeyHelper.GetKeyNames(Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            获取主键名
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.Udf.EntityKeyHelper.GetKeys``1(``0,Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            获取主键内容
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.Udf.EntityKeyHelper.GetKeys(System.Object,Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            获取主键内容
            </summary>
            <param name="entity"></param>
            <param name="context"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.DB.EFEx.UnitOfWork`1">
            <summary>
               事物单元工厂类
                add by Grant 2014-3-27
            </summary>
            <typeparam name="TContext">库名</typeparam>
        </member>
        <member name="P:SuperGMS.DB.EFEx.UnitOfWork`1.DbContext">
            <summary>
            Gets the db context.
            </summary>
            <returns>The instance of type <typeparamref name="TContext"/>.</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.UnitOfWork`1.GetRepository``1">
            <summary>
            Gets the specified repository for the <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>An instance of type inherited from <see cref="T:SuperGMS.DB.EFEx.ICrudRepository`1"/> interface.</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.UnitOfWork`1.ExecuteSqlCommand(System.String,System.Object[])">
            <summary>
            Executes the specified raw SQL command.
            </summary>
            <param name="sql">The raw SQL.</param>
            <param name="parameters">The parameters.</param>
            <returns>The number of state entities written to database.</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.UnitOfWork`1.FromSql``1(System.String,System.Object[])">
            <summary>
            Uses raw SQL queries to fetch the specified <typeparamref name="TEntity" /> data.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="sql">The raw SQL.</param>
            <param name="parameters">The parameters.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements that satisfy the condition specified by raw SQL.</returns>
        </member>
        <member name="M:SuperGMS.DB.EFEx.UnitOfWork`1.Commit">
            <summary>
                是当前DBContext 提交到数据库中
            </summary>
            <exception cref="T:SuperGMS.ExceptionEx.BusinessException">数据已经被更改，请重新加载操作</exception>
            <exception cref="T:SuperGMS.ExceptionEx.BusinessException">DbUpdateException 提取 InnerException 抛出，开发更容易看懂</exception>
            <exception cref="T:SuperGMS.ExceptionEx.BusinessException">DbEntityValidationException 提取EntityValidationErrors 抛出，开发更容易看懂</exception>
        </member>
        <member name="M:SuperGMS.DB.EFEx.UnitOfWork`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SuperGMS.DB.MapperEx.AutoMapperProfile`3">
            <summary>
            通用映射配置
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TEditDTO"></typeparam>
            <typeparam name="TQueryDTO"></typeparam>
        </member>
        <member name="T:SuperGMS.DB.MapperEx.AutoMapperTool">
            <summary>
            Auto Mapper 注册工具类
            </summary>
        </member>
        <member name="M:SuperGMS.DB.MapperEx.AutoMapperTool.GetProfiles">
            <summary>
            获取映射关系
            </summary>
        </member>
        <member name="M:SuperGMS.DB.MapperEx.AutoMapperTool.RegAllProfiles(System.Collections.Generic.List{AutoMapper.Profile})">
            <summary>
            将所有的profiles 注册到 AutoMapper中
            </summary>
            <param name="profiles"></param>
        </member>
        <member name="M:SuperGMS.DB.MapperEx.AutoMapperTool.RegisterMap">
            <summary>
            注册Map
            </summary>
        </member>
        <member name="M:SuperGMS.DB.MapperEx.AutoMapperTool.Map``2(``0)">
             <summary>
            
             </summary>
             <typeparam name="TSource"></typeparam>
             <typeparam name="TDestination"></typeparam>
             <param name="source"></param>
             <returns></returns>
        </member>
        <member name="M:SuperGMS.DB.MapperEx.AutoMapperTool.Map``2(``0,``1)">
             <summary>
            
             </summary>
             <typeparam name="TSource"></typeparam>
             <typeparam name="TDestination"></typeparam>
             <param name="source"></param>
             <param name="destination"></param>
             <returns></returns>
        </member>
        <member name="T:SuperGMS.DB.MapperEx.AutoMapperTool.MyConvention">
            <summary>
            自定义Automaper 属性Name转换,全属性转换
            </summary>
        </member>
        <member name="P:SuperGMS.DB.MapperEx.AutoMapperTool.MyConvention.SplittingExpression">
            <summary>
            Grant没意义, 因为写成空或者Null 会报错.
            </summary>
        </member>
        <member name="T:SuperGMS.GrantLock.DistributedLock">
            <summary>
            分布式锁，提供全局分布式锁支持，以resource redis为基础
            这个锁只能通过RpcContext来获取，通过自己手动释放
            </summary>
        </member>
        <member name="M:SuperGMS.GrantLock.DistributedLock.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="lockName"></param>
            <param name="autoDelete">自动删除，ms,默认 60s</param>
            <param name="checkTimeSpan">如果不能获取锁，重复检查间隔:默认 50ms</param>
        </member>
        <member name="M:SuperGMS.GrantLock.DistributedLock.Acquire(System.Nullable{System.TimeSpan})">
            <summary>
            获取锁
            </summary>
            <param name="timeout">超时为null，则尝试一次即返回</param>
            <returns>获取锁成功?</returns>
        </member>
        <member name="M:SuperGMS.GrantLock.DistributedLock.ReleaseLock">
            <summary>
            释放锁
            </summary>
        </member>
        <member name="T:SuperGMS.GrantLock.LockManager">
            <summary>
            GrantLockManager
            </summary>
        </member>
        <member name="M:SuperGMS.GrantLock.LockManager.TryGetLock(System.String,System.Int32,System.Int32)">
            <summary>
            如果返回结果为null，说明获取锁失败
            </summary>
            <param name="lockKey"></param>
            <param name="timeOut"></param>
            <param name="autoReleaseTime"></param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.ExceptionEx.BusinessException">
            <summary>
             业务异常,用来区分是代码级别的异常还是逻辑类的异常
             业务的状态码必须大于600
            </summary>
        </member>
        <member name="M:SuperGMS.ExceptionEx.BusinessException.#ctor(SuperGMS.Protocol.RpcProtocol.StatusCode)">
            <summary>
            构造的时候给一个异常说明
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SuperGMS.ExceptionEx.BusinessException.#ctor(System.String)">
            <summary>
            默认返回600，如果有特殊流程自己定义大于600的即可
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:SuperGMS.ExceptionEx.BusinessException.#ctor(System.String,System.Exception)">
            <summary>
            默认返回600，如果有特殊流程自己定义大于600的即可
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:SuperGMS.ExceptionEx.ExceptionTool.GetSimpleErrorMsgByException(System.Exception)">
            <summary>
            获取异常信息
            如果异常时 EF 异常,则获取详情内容
            如果异常是普通异常,则递归获取innerException的  msg 和 stackTrace
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.ExceptionEx.ExceptionTool.GetSimpleErrorMsgByValidationException(System.ComponentModel.DataAnnotations.ValidationException)">
            <summary>
            获取异常信息
            如果异常时 EF 异常,则获取详情内容
            如果异常是普通异常,则递归获取innerException的  msg 和 stackTrace
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.ExceptionEx.ExceptionTool.GetEasyErrorMessage(System.String)">
            <summary>
            EF抛出的常见异常有长度,主键,外键异常,可以简化翻译给用户直接查看
            例：Data too long for column 'REMARK' at row 1
            </summary>
            <param name = "e" ></param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.ExceptionEx.FrameworkException">
            <summary>
            框架异常,上层业务类应该捕获框架类异常并做进一步处理
            </summary>
        </member>
        <member name="M:SuperGMS.ExceptionEx.FrameworkException.#ctor(System.String)">
            <summary>
            构造的时候给一个异常说明
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SuperGMS.ExceptionEx.FrameworkException.#ctor(System.String,System.Exception)">
            <summary>
            构造的时候给一个异常说明
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:SuperGMS.Extensions.DataTableExtensions.ExpandRowsByFixTime(System.Data.DataTable,System.Int32,System.String)">
            <summary>
            按固定次数扩充DataTable行数据,新Table会追加新列EXPAND_ROW_INTERNAL_SEQ(如果已存在,则增加 EXPAND_ROW_INTERNAL_SEQ1)
            </summary>
            <param name="dt"></param>
            <param name="times">行扩充(复制)到的次数, 必须大于0</param>
            <param name="newTableName">新TableName,不传默认为原始表名</param>
            <returns>新Table</returns>
        </member>
        <member name="M:SuperGMS.Extensions.DataTableExtensions.ExpandRowsBySpecificColumn(System.Data.DataTable,System.String,System.String)">
            <summary>
            按指定列数值扩充DataTable行数据,新Table会追加新列EXPAND_ROW_INTERNAL_SEQ(如果已存在,则增加 EXPAND_ROW_INTERNAL_SEQ1)
            </summary>
            <param name="dt"></param>
            <param name="colName">指定列明,如行项该列数据转换int异常或小于等于0,则仅保留原行</param>
            <param name="newTableName">新TableName,不传默认为原始表名</param>
            <returns>新Table</returns>
        </member>
        <member name="T:SuperGMS.Extensions.Enum.HashKeyType">
            <summary>
             Hash Key 枚举
            </summary>
        </member>
        <member name="F:SuperGMS.Extensions.Enum.HashKeyType.LocalResource">
            <summary>
            默认资源
            </summary>
        </member>
        <member name="F:SuperGMS.Extensions.Enum.HashKeyType.TtResource">
            <summary>
            租户级别
            </summary>
        </member>
        <member name="T:SuperGMS.Extensions.RpcContextExtensions">
            <summary>
            获取资源信息
            </summary>
        </member>
        <member name="M:SuperGMS.Extensions.RpcContextExtensions.R(SuperGMS.Rpc.Server.RpcContext,System.String)">
             <summary>
             得到指定key的资源信息,默认按照 微服务名称获取相关信息
            
             </summary>
             <param name="context">上下文</param>
             <param name="key">key</param>
             <returns>资源</returns>
        </member>
        <member name="T:SuperGMS.FileEx.SheetColumnInfo">
            <summary>
            Excel表头信息
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.SheetColumnInfo.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.SheetColumnInfo.MustImport">
            <summary>
            必须导入列吗
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.SheetColumnInfo.Note">
            <summary>
            注释
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.SheetColumnInfo.NotImport">
            <summary>
            不导入的列吗
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.SheetColumnInfo.ColProperty">
            <summary>
            列属性
            </summary>
        </member>
        <member name="T:SuperGMS.FileEx.SheetInfo">
            <summary>
            Excel 对应的类信息，包含多个子表
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.SheetInfo.Name">
            <summary>
            sheet 资源名
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.SheetInfo.PropertyInfo">
            <summary>
            子属性信息 ，如果为给定父类型，则为null
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.SheetInfo.Type">
            <summary>
            解析的类型
            </summary>
        </member>
        <member name="T:SuperGMS.FileEx.ClassResourceParse">
            <summary>
            辅助解析类的信息，包含属性，类名，及资源相关的转换
            辅助用于Excel生成
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.ClassResourceParse.Name">
            <summary>
            得到类型的 资源名称
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.ClassResourceParse.PropertyInfos">
            <summary>
            从缓存获取类型的 属性信息
            </summary>
        </member>
        <member name="M:SuperGMS.FileEx.ClassResourceParse.GetSheetInfo(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            根据提供的类型 获取Excel 表头信息
            </summary>
            <param name="type">外界调用</param>
            <param name="pi">如果是泛型属性，则继续</param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.FileEx.ClassResourceParse.GetColumnTypeName(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            获取列类型
            </summary>
            <param name="propertyInfo"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.FileEx.CommonUdfButtonJob">
            <summary>
            通用自定义按钮基类
            继承此类后,需要重写Excute 即可实现自定义按钮功能,
            执行到结束请返回提示信息, 如果需要提示错误信息, 可以直接抛出 BusinessException
            </summary>
        </member>
        <member name="M:SuperGMS.FileEx.CommonUdfButtonJob.DeleteFileAsyn(System.Double,System.String)">
            <summary>
            异步删除文件, 主要是为了给自定义打印实现一个辅助函数
            </summary>
            <param name="delaySencods">延迟秒数</param>
            <param name="fileFullPath">文件完成物理路径</param>
        </member>
        <member name="M:SuperGMS.FileEx.CommonUdfButtonJob.DeleteFileDelegate(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            删除文件委托方法
            </summary>
            <param name="sender">myTimer</param>
            <param name="e">参数</param>
        </member>
        <member name="T:SuperGMS.FileEx.CommonUdfButtonJob.MyTimer">
            <summary>
            自定义Timer 用来删除文件
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.CommonUdfButtonJob.MyTimer.filePath">
            <summary>
            要删除的文件路径
            </summary>
        </member>
        <member name="T:SuperGMS.FileEx.GrantImportSetting">
            <summary>
            自定义导入设置
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.ImportTemplateID">
            <summary>
            模板代码
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.ImportTemplateName">
            <summary>
            模板名称
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.ImportOperation">
            <summary>
            导入\出类型
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.ImportType">
            <summary>
            导入DTO名
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.ImportSubType">
            <summary>
            导入DTO名
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.ImportSheetName">
            <summary>
            下载文件的sheet名
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.ImportFileName">
            <summary>
            下载的文件名
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.ImportMaxCount">
            <summary>
            最大导入行数
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.ImportFieldID">
            <summary>
            字段ID
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.ImportFieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.ImportSeqNo">
            <summary>
            列顺序
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.ImportTypeSeqNo">
            <summary>
            类型顺序
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.IsImport">
            <summary>
            是否导入
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.IsImportMust">
            <summary>
            是否必须导入
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.IsMultSheet">
            <summary>
            是否多页签
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.IsImportKeyField">
            <summary>
            是否关键字段（作为主键使用）
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.IsImportPrimaryField">
            <summary>
            是否关键字段（作为主键使用）
            </summary>
        </member>
        <member name="P:SuperGMS.FileEx.GrantImportSetting.ImportDefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="M:SuperGMS.FileEx.ISftpClient.DirExist(System.String)">
            <summary>
            目录是否存在
            </summary>
            <param name="dirName">目录名称必须从根开始</param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.FileEx.ISftpClient.Mkdir(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="dirName">目录名称必须从根开始</param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.FileEx.IUdfButtonJob">
            <summary>
            自定义按钮接口
            当自定义按钮是以Job形式运行,则会通过接口实例化一个Job对象并调用Excute方法
            需要将主键数组传入进来
            </summary>
        </member>
        <member name="M:SuperGMS.FileEx.IUdfButtonJob.Excute(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            执行方法
            </summary>
            <param name="listObject">
            关于对象的泛型主键集合
            </param>
            <param name="buttonId">
            自定义按钮ID
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:SuperGMS.FileEx.OperCsv">
            <summary>
                OperCSV is a helper class handling csv files.
            </summary>
        </member>
        <member name="M:SuperGMS.FileEx.OperCsv.WriteFile(System.String,System.Collections.Generic.List{System.String[]})">
            <summary>
                写入CSV文件
            </summary>
            <param name="filePathName">文件路径</param>
            <param name="listString"></param>
        </member>
        <member name="M:SuperGMS.FileEx.OperCsv.WriteFile(System.String,System.Boolean,System.Collections.Generic.List{System.String[]})">
            <summary>
                写入CSV文件
            </summary>
            <param name="filePathName">文件路径</param>
            <param name="append">是否追加写入，false时将重写文件</param>
            <param name="listString">字符串数组LIST</param>
        </member>
        <member name="M:SuperGMS.FileEx.OperCsv.WriteFile``1(System.String,System.Boolean,System.Collections.Generic.List{``0})">
            <summary>
                写入CSV文件
            </summary>
            <typeparam name="T">范型</typeparam>
            <param name="filePathName">文件路径</param>
            <param name="append">是否追加写入，false时将重写文件</param>
            <param name="listObj">范型LIST</param>
        </member>
        <member name="M:SuperGMS.FileEx.OperCsv.WriteFile(System.String,System.Boolean,System.Data.DataTable)">
            <summary>
                写入CSV文件
            </summary>
            <param name="filePathName">文件路径</param>
            <param name="append">是否追加写入，false时将重写文件</param>
            <param name="dataSource">DataTable数据源</param>
        </member>
        <member name="M:SuperGMS.FileEx.OperCsv.WriteStream(System.Collections.Generic.List{System.String[]})">
            <summary>
                写入内存流对象
            </summary>
            <param name="listString">字符串数组LIST</param>
            <returns>MemoryStream</returns>
        </member>
        <member name="M:SuperGMS.FileEx.OperCsv.WriteStream``1(System.Collections.Generic.List{``0})">
            <summary>
                写入内存流对象
            </summary>
            <typeparam name="T">范型</typeparam>
            <param name="listObj">范型LIST</param>
            <returns>MemoryStream</returns>
        </member>
        <member name="M:SuperGMS.FileEx.OperCsv.WriteStream(System.Data.DataTable)">
            <summary>
                写入内存流对象
            </summary>
            <param name="dataSource">DataTable数据源</param>
            <returns>MemoryStream</returns>
        </member>
        <member name="M:SuperGMS.FileEx.OperCsv.Read(System.String)">
            <summary>
                解析 CVS 文件内容为一个二维数组。
            </summary>
            <param name="src">CVS 文件内容字符串</param>
            <returns>二维数组。String[line count][column count]</returns>
        </member>
        <member name="M:SuperGMS.FileEx.OperCsv.ToDataTable(System.String)">
            <summary>
            分割 CVS 文件内容为DataTable
            </summary>
            <param name="src">CVS 文件内容字符串</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:SuperGMS.FileEx.OperCsv.ComparePropertyByName(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
                类属性排序比较函数,
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>x比y大返回1, 相等返回0, 小返回-1</returns>
        </member>
        <member name="M:SuperGMS.FileEx.OperCsv.FormatCell(System.String)">
            <summary>
                格式化CSV单元格字符串值
            </summary>
            <param name="cellText"></param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.HttpProxy.SuperHttpProxy">
            <summary>
            GrantHttpProxy
            </summary>
        </member>
        <member name="M:SuperGMS.HttpProxy.SuperHttpProxy.Send(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            前端代理处理程序，收和发
            </summary>
            <param name="context">http上下文</param>
            <returns>结果，不会抛出异常</returns>
        </member>
        <member name="M:SuperGMS.HttpProxy.SuperHttpProxy.IsController(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            是否以Controller结尾，的自定义Api
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.HttpProxy.SuperHttpProxy.SendHttp(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            直接提供webApi本地直接处理请求，不转发到后端rpcServer
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.HttpProxy.SuperHttpProxy.UpdateHttpProxy(SuperGMS.Config.Configuration)">
            <summary>
            zk 反向更新
            </summary>
            <param name="proxy">代理层配置</param>
        </member>
        <member name="T:SuperGMS.JsonEx.IXmlSerializableConverter">
            <summary>
            IXmlSerializable类型的Json序列化
            </summary>
        </member>
        <member name="M:SuperGMS.JsonEx.IXmlSerializableConverter.CanConvert(System.Type)">
            <summary>
            
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.JsonEx.IXmlSerializableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            反序列化
            </summary>
        </member>
        <member name="M:SuperGMS.JsonEx.IXmlSerializableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:SuperGMS.JsonEx.JsonConvert">
            <summary>
            Json序列化，使用Newtonsoft 提供的序列化方法
            </summary>
        </member>
        <member name="F:SuperGMS.JsonEx.JsonConvert.logger">
            <summary>
            log
            </summary>
        </member>
        <member name="M:SuperGMS.JsonEx.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            将字符串反序列化为指定的对象
            </summary>
            <param name="value"></param>
            <typeparam name="T">指定的对象</typeparam>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.JsonEx.JsonConvert.CopyObject``1(``0)">
            <summary>
            Copy 序列化一个新对象
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="t">需要Copy的对象</param>
            <returns>新对象</returns>
        </member>
        <member name="M:SuperGMS.JsonEx.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            将字符串反序列化为指定的对象
            </summary>
            <param name="value"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.JsonEx.JsonConvert.XmlToDeserializeObject``1(System.String)">
            <summary>
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="xml">xml文档</param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.JsonEx.JsonConvert.JsonSerializer(System.Object,System.Boolean)">
            <summary>
            将对象序列化为字符串
            </summary>
            <param name="obj"></param>
            <param name="removeEmptyProp">将null属性,0.0属性,0001-01-01 00:00:00 属性的值替换为空</param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.JsonEx.SuperGMSDateTimeJsonConvert">
            <summary>
            GrantDateTimeJsonConvert
            </summary>
        </member>
        <member name="M:SuperGMS.JsonEx.SuperGMSDateTimeJsonConvert.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读Json
            </summary>
            <param name="reader">reader</param>
            <param name="objectType">objectType</param>
            <param name="existingValue">existingValue</param>
            <param name="serializer">serializer</param>
            <returns>object</returns>
        </member>
        <member name="M:SuperGMS.JsonEx.SuperGMSDateTimeJsonConvert.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写Json
            </summary>
            <param name="writer">writer</param>
            <param name="value">value</param>
            <param name="serializer">serializer</param>
        </member>
        <member name="T:SuperGMS.Log.LogBase">
            <summary>
            日志基类，抽象类，实现 公共方法
            </summary>
        </member>
        <member name="M:SuperGMS.Log.LogBase.SetInfo``1(SuperGMS.Protocol.RpcProtocol.Args{System.Object},SuperGMS.Protocol.RpcProtocol.Result{``0},System.Exception)">
            <summary>
            设置结果信息日志
            </summary>
            <param name="args">参数信息</param>
            <param name="result">结果信息</param>
            <param name="ex">异常</param>
        </member>
        <member name="P:SuperGMS.Log.LogBase.Id">
            <summary>
            自增序号
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogBase.TransactionId">
            <summary>
            事务ID
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogBase.Desc">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogBase.ServiceName">
            <summary>
            微服务名
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogBase.ApiName">
            <summary>
            api名称
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogBase.CreatedDate">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="T:SuperGMS.Log.LogFactory">
            <summary>
            日志记录器工厂
            </summary>
        </member>
        <member name="M:SuperGMS.Log.LogFactory.#cctor">
            <summary>
            构造一个文件日志提供者
            </summary>
        </member>
        <member name="M:SuperGMS.Log.LogFactory.CreateLogger(System.String)">
            <summary>
            构造日志记录器
            </summary>
            <param name="categoryName">分类</param>
            <returns>日志记录</returns>
        </member>
        <member name="M:SuperGMS.Log.LogFactory.CreateLogger``1">
            <summary>
            构造日志记录器
            </summary>
            <typeparam name="T">记录器使用泛型名称</typeparam>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.Log.LogInfo">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="M:SuperGMS.Log.LogInfo.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogInfo.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogInfo.CodeMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogInfo.Parameters">
            <summary>
            参数信息
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogInfo.UseChain">
            <summary>
            调用链
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogInfo.AppNamespace">
            <summary>
            app命名空间
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogInfo.ComputerName">
            <summary>
            计算机名
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogInfo.ComputerIp">
            <summary>
            计算机ip
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogInfo.CreatedBy">
            <summary>
            来源
            </summary>
        </member>
        <member name="M:SuperGMS.Log.LogInfo.SetInfo``1(SuperGMS.Protocol.RpcProtocol.Args{System.Object},SuperGMS.Protocol.RpcProtocol.Result{``0},System.Exception)">
            <inheritdoc cref="T:SuperGMS.Log.LogBase"/>
        </member>
        <member name="M:SuperGMS.Log.LogInfo.ToString">
            <summary>
            日志格式化字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="P:SuperGMS.Log.LogRequest.Token">
            <summary>
            token
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogRequest.UserId">
            <summary>
            登录名
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogRequest.Ttid">
            <summary>
            ttid
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogRequest.Lang">
            <summary>
            语言
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogRequest.ClientType">
            <summary>
            客户类型
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogRequest.ClientVersion">
            <summary>
            客户版本
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogRequest.ClientIp">
            <summary>
            客户端ip
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogRequest.ClientInfo">
            <summary>
            客户端信息
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogRequest.ExecuteTime">
            <summary>
            整体执行时间 ms
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogRequest.ComputerIp">
            <summary>
            代理类处理的服务IP和端口
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogRequest.SourceUrl">
            <summary>
            源地址
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogRequest.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogRequest.CodeMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogRequest.Parameters">
            <summary>
            传入参数
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogRequest.Result">
            <summary>
            返回结果
            </summary>
        </member>
        <member name="M:SuperGMS.Log.LogRequest.SetInfo(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            设置http 请求信息
            </summary>
            <param name="context">Http上下文</param>
        </member>
        <member name="M:SuperGMS.Log.LogRequest.SetInfo``1(SuperGMS.Protocol.RpcProtocol.Args{System.Object},SuperGMS.Protocol.RpcProtocol.Result{``0},System.Exception)">
            <inheritdoc cref="T:SuperGMS.Log.LogBase"/>
        </member>
        <member name="M:SuperGMS.Log.LogRequest.ToString">
            <summary>
            日志格式化字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:SuperGMS.Log.LogStat">
            <summary>
            统计信息日志
            </summary>
        </member>
        <member name="M:SuperGMS.Log.LogStat.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogStat.BusinessType">
            <summary>
            事务类型
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogStat.Token">
            <summary>
            token
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogStat.UserId">
            <summary>
            登录名
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogStat.Ttid">
            <summary>
            ttid
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogStat.Lang">
            <summary>
            语言
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogStat.ClientType">
            <summary>
            客户类型
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogStat.ClientVersion">
            <summary>
            客户版本
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogStat.ClientIp">
            <summary>
            客户端ip
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogStat.ClientInfo">
            <summary>
            客户端信息
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogStat.ExecuteTime">
            <summary>
            整体执行时间 ms
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogStat.ComputerIp">
            <summary>
            代理类处理的服务IP和端口
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogStat.SourceUrl">
            <summary>
            源地址
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogStat.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogStat.CodeMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:SuperGMS.Log.LogStat.WriteDate">
            <summary>
            落盘时间，
            </summary>
        </member>
        <member name="M:SuperGMS.Log.LogStat.SetInfo(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            设置http 请求信息
            </summary>
            <param name="context">Http上下文</param>
        </member>
        <member name="M:SuperGMS.Log.LogStat.SetInfo``1(SuperGMS.Protocol.RpcProtocol.Args{System.Object},SuperGMS.Protocol.RpcProtocol.Result{``0},System.Exception)">
            <inheritdoc cref="T:SuperGMS.Log.LogBase"/>
        </member>
        <member name="M:SuperGMS.Log.LogStat.ToString">
            <summary>
            日志格式化字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:SuperGMS.MQ.ExchangeConst">
            <summary>
            定义交换机相关的常量
            </summary>
        </member>
        <member name="T:SuperGMS.MQ.VirtualHostConst">
            <summary>
            虚拟机
            </summary>
        </member>
        <member name="T:SuperGMS.MQ.MQueueConst">
            <summary>
            定义队列名称常量
            </summary>
        </member>
        <member name="T:SuperGMS.MQ.RouterKeyConst">
            <summary>
            路由key，根据这个key进行分发路由
            </summary>
        </member>
        <member name="T:SuperGMS.MQ.GrantMsgReceiveHandle`1">
            <summary>
            封装一个底层消息的委托
            </summary>
            <param name="msg">msg</param>
            <param name="ex">ex</param>
            <returns>返回处理成功还是失败</returns>
        </member>
        <member name="T:SuperGMS.MQ.Consumer`1">
            <summary>
            所有消费者的基类
            </summary>
            <typeparam name="M">M</typeparam>
        </member>
        <member name="E:SuperGMS.MQ.Consumer`1.OnGrantMsgReceive">
            <summary>
            当收到底层消息时触发的事件
            </summary>
        </member>
        <member name="M:SuperGMS.MQ.Consumer`1.Register">
            <summary>
            注册一个消费者
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.MQ.Consumer`1.Dispose">
            <summary>
            手动释放消费者
            </summary>
        </member>
        <member name="M:SuperGMS.MQ.Consumer`1.#ctor(SuperGMS.MQ.RabbitMQ.MQueue)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.MQ.Consumer`1"/> class.
            消费者 最全构造
            </summary>
            <param name="queue">queue</param>
        </member>
        <member name="M:SuperGMS.MQ.Consumer`1.#ctor(System.String,System.String,System.String,System.Boolean,SuperGMS.MQ.RabbitMQ.VirtualHost)">
            <summary>
            Initializes a new instance of the <see cref="!:GrantConsumer&lt;M&gt;"/> class.
            消费者，一个完全自定义的消费者
            </summary>
            <param name="exchange">exchange</param>
            <param name="routeKey">routeKey</param>
            <param name="queueName">queueName</param>
            <param name="autoDelete">autoDelete</param>
            <param name="host">虚拟主机(可以用HostConfigManager.GetHost获取)</param>
        </member>
        <member name="T:SuperGMS.MQ.DefaultConsumer`1">
            <summary>
            一个业务层的消费者
            </summary>
            <typeparam name="M">M</typeparam>
        </member>
        <member name="M:SuperGMS.MQ.DefaultConsumer`1.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            消费者，一个指定了特定queueName上特定routeKey的消费，其他系统默认
            </summary>
            <param name="queueName">这个队列一定要注意，特定的key，对应特定的接收队列，
            真正决定消息的路由是routeKey,Queue是接收的容器，理论上不同的routeKey要定义不同的Queue,否则不同的key投送到同一个Queue上就乱了</param>
            <param name="routeKey">路由key</param>
            <param name="autoDelete">是否自动删除</param>
        </member>
        <member name="M:SuperGMS.MQ.DefaultConsumer`1.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.MQ.DefaultConsumer`1"/> class.
            消费者，一个完全自定义的消费者
            </summary>
            <param name="exchange">exchange</param>
            <param name="routeKey">routeKey</param>
            <param name="queueName">queueName</param>
            <param name="autoDelete">autoDelete</param>
        </member>
        <member name="T:SuperGMS.MQ.Consumer.PullConsumer`1">
            <summary>
            拉模式消费者
            </summary>
            <typeparam name="M">消息内容</typeparam>
        </member>
        <member name="M:SuperGMS.MQ.Consumer.PullConsumer`1.#ctor(SuperGMS.MQ.RabbitMQ.MQueue)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.MQ.Consumer`1"/> class.
            消费者 最全构造
            </summary>
            <param name="queue">queue</param>
        </member>
        <member name="M:SuperGMS.MQ.Consumer.PullConsumer`1.Register">
            <summary>
            注册一个消费者
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.MQ.Consumer.PullConsumer`1.DealPullMsg(System.Func{`0,System.Exception,System.Boolean})">
            <summary>
            拉取并处理消息
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:SuperGMS.MQ.MQHostConfigManager.GetHost(System.String)">
            <summary>
            获取指定的Host
            </summary>
            <param name="host">host</param>
            <returns>VirtualHost</returns>
        </member>
        <member name="M:SuperGMS.MQ.MQHostConfigManager.GetDefaultHost">
            <summary>
            获取默认Host
            </summary>
            <returns>VirtualHost</returns>
        </member>
        <member name="T:SuperGMS.MQ.MQManager`1">
            <summary>
            一个默认配置消息的管理类
            </summary>
        </member>
        <member name="M:SuperGMS.MQ.MQManager`1.Publish(SuperGMS.Protocol.MQProtocol.MQProtocol{`0},System.String)">
            <summary>
             发布一条指定了特定routerKey的消息
            </summary>
            <param name="msg">消息内容</param>
            <param name="routerKey">消息特定标识</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.MQ.MQManager`1.Publish(SuperGMS.Protocol.MQProtocol.MQProtocol{`0},System.String,SuperGMS.MQ.RabbitMQ.VirtualHost)">
            <summary>
            指定虚拟机，发送特定routerKey的消息
            </summary>
            <param name="msg">msg</param>
            <param name="routerKey">routerKey</param>
            <param name="host">host</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.MQ.MQManager`1.ConsumeRegister(System.String,System.String,System.Boolean,System.Func{SuperGMS.Protocol.MQProtocol.MQProtocol{`0},System.Exception,System.Boolean})">
            <summary>
            注册一个指定了routerKey的消费者
            </summary>
            <param name="routerKey">特定的routerKey这个用户特定标识特殊消息</param>
            <param name="autoDelete">是否自动删除,true为自动删除，false不会自动删除，需要业务自己删除</param>
            <param name="fn">/// 处理返回消息的回调，注意如果autoDelete指定为false说明调用方需要自己确定
            消息什么时候删除，这里就需要fn返回是否删除，autoDelete指定为true时，fn这个返回值将不起作用
            </param>
        </member>
        <member name="M:SuperGMS.MQ.MQManager`1.ConsumeRegister(System.String,System.String,SuperGMS.MQ.RabbitMQ.VirtualHost,System.Boolean,System.Func{SuperGMS.Protocol.MQProtocol.MQProtocol{`0},System.Exception,System.Boolean})">
            <summary>
            注册一个指定了Host的特定routerKey的消费者
            </summary>
            <param name="routerKey">注册接受特定的routerKey的消息</param>
            <param name="queueName">将特定的routerKey的消息接受到自己的queueName中</param>
            <param name="host">特定的host服务器</param>
            <param name="autoDelete">是否自动删除autoDelete，一般不要在注册的时候设置为true,在处理完消息的回调中删除消息</param>
            <param name="fn">回调fn</param>
        </member>
        <member name="M:SuperGMS.MQ.MQManager`1.PullConsumeRegister(System.String,System.String,SuperGMS.MQ.RabbitMQ.VirtualHost,System.Boolean)">
            <summary>
            注册一个指定了Host的特定routerKey的拉消费者
            </summary>
            <param name="routerKey">注册接受特定的routerKey的消息</param>
            <param name="queueName">将特定的routerKey的消息接受到自己的queueName中</param>
            <param name="host">特定的host服务器</param>
            <param name="autoDelete">是否自动删除autoDelete，一般不要在注册的时候设置为true,在处理完消息的回调中删除消息</param>
        </member>
        <member name="M:SuperGMS.MQ.MQManager`1.Dispose">
            <summary>
            凡是注册过消费者(ConsumeRegister)的，一定要在程序退出时调用此方法
            释放掉所有的消费者,这里不释放会导致底层连接一直占着
            </summary>
        </member>
        <member name="T:SuperGMS.MQ.DefaultPublisher`1">
            <summary>
            消息发布者
            </summary>
            <typeparam name="M">M</typeparam>
        </member>
        <member name="M:SuperGMS.MQ.DefaultPublisher`1.#ctor(`0,System.String,System.Boolean)">
            <summary>
            消息发布者(默认配置，指定特定routerKey)
            </summary>
            <param name="msg">消息</param>
            <param name="routerKey">关注的特定key消息，决定路由</param>
            <param name="autoDelete">是否自动删除</param>
        </member>
        <member name="M:SuperGMS.MQ.DefaultPublisher`1.#ctor(`0,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.MQ.DefaultPublisher`1"/> class.
            消息发布者  非默认，一个自定义的消息交换机、队列、路由key
            </summary>
            <param name="msg">消息</param>
            <param name="exchange">交换机</param>
            <param name="routeKey">路由key</param>
            <param name="queueName">队列</param>
            <param name="autoDelete">是否自动删除</param>
        </member>
        <member name="M:SuperGMS.MQ.DefaultPublisher`1.#ctor(`0,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.MQ.DefaultPublisher`1"/> class.
            消息发布者（默认配置，指定了特定的routeKey和queueName）
            </summary>
            <param name="msg">消息</param>
            <param name="routeKey">消息路由标记routeKey</param>
            <param name="queueName">发送者没有队列，这里不对，所以改成private</param>
            <param name="autoDelete">是否自动删除</param>
        </member>
        <member name="T:SuperGMS.MQ.FanoutPublisher`1">
            <summary>
            扇出消息 发布者
            </summary>
            <typeparam name="TM">消息类型</typeparam>
        </member>
        <member name="M:SuperGMS.MQ.FanoutPublisher`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.MQ.FanoutPublisher`1"/> class.
            消息发布者（默认配置）
            </summary>
            <param name="msg">消息</param>
            <param name="autoDelete">是否自动删除</param>
        </member>
        <member name="M:SuperGMS.MQ.FanoutPublisher`1.#ctor(`0,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.MQ.FanoutPublisher`1"/> class.
            消息发布者（默认配置，指定了特定的routeKey和queueName）
            </summary>
            <param name="msg">消息</param>
            <param name="queueName">队列名称</param>
            <param name="autoDelete">是否自动删除</param>
        </member>
        <member name="M:SuperGMS.MQ.FanoutPublisher`1.#ctor(`0,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.MQ.FanoutPublisher`1"/> class.
            消息发布者  非默认，一个自定义的消息交换机、队列、路由key
            </summary>
            <param name="msg">消息</param>
            <param name="exchange">交换机</param>
            <param name="queueName">队列</param>
            <param name="autoDelete">是否自动删除</param>
        </member>
        <member name="T:SuperGMS.MQ.Publisher`1">
            <summary>
            所有生产者的基类
            </summary>
            <typeparam name="M">M</typeparam>
        </member>
        <member name="M:SuperGMS.MQ.Publisher`1.#ctor(SuperGMS.MQ.RabbitMQ.MQueue,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.MQ.Publisher`1"/> class.
            消息发布者 最全量的构造
            </summary>
            <param name="mq">mq</param>
            <param name="msg">msg</param>
        </member>
        <member name="M:SuperGMS.MQ.Publisher`1.#ctor(`0,System.String,System.String,System.String,System.Boolean,SuperGMS.MQ.RabbitMQ.VirtualHost)">
            <summary>
            Initializes a new instance of the <see cref="!:GrantPublisher&lt;M&gt;"/> class.
            消息发布者  非默认，一个自定义的消息交换机、队列、路由key
            </summary>
            <param name="msg">消息</param>
            <param name="exchange">交换机</param>
            <param name="routeKey">路由key</param>
            <param name="queueName">队列</param>
            <param name="autoDelete">是否自动删除</param>
        </member>
        <member name="M:SuperGMS.MQ.Publisher`1.Publish">
            <summary>
            发布消息
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:SuperGMS.MQ.RabbitMQ.Exchange">
            <summary>
            交换机
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.Exchange.VHost">
            <summary>
            所属虚拟Host
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.Exchange.ExchangeName">
            <summary>
            交换机名称
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.Exchange.ExchangeType">
            <summary>
            投送模式
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.Exchange.Durable">
            <summary>
            是否是持久化的交换机
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.Exchange.AutoDeclare">
            <summary>
            是否可以自动创建
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.Exchange.AutoDelete">
            <summary>
            是否可以在空闲时自动删除
            </summary>
        </member>
        <member name="T:SuperGMS.MQ.RabbitMQ.ExchangeType">
            <summary>
            交换机类型
            </summary>
        </member>
        <member name="F:SuperGMS.MQ.RabbitMQ.ExchangeType.Direct">
            <summary>
            直接投送模式，关键字完全匹配
            </summary>
        </member>
        <member name="F:SuperGMS.MQ.RabbitMQ.ExchangeType.Headers">
            <summary>
            键值对匹配模式
            </summary>
        </member>
        <member name="F:SuperGMS.MQ.RabbitMQ.ExchangeType.Fanout">
            <summary>
            绑定广播模式，所有绑定到Exchange上的队列都会投送
            </summary>
        </member>
        <member name="F:SuperGMS.MQ.RabbitMQ.ExchangeType.Topic">
            <summary>
            主题匹配模式，模糊匹配
            </summary>
        </member>
        <member name="T:SuperGMS.MQ.RabbitMQ.MQueue">
            <summary>
            队列
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.MQueue.QueueName">
            <summary>
            队列名称
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.MQueue.RouteKey">
            <summary>
            如果投送模式是Direct 需要指定这个值，作为投送的key,匹配到此Queue
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.MQueue.Durable">
            <summary>
            是否是持久化队列
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.MQueue.AutoDeclare">
            <summary>
            是否允许自动创建
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.MQueue.AutoDelete">
            <summary>
            是否在空闲时允许删除
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.MQueue.Exclusive">
            <summary>
            排他性
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.MQueue.Host">
            <summary>
            所在的虚拟主机
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.MQueue.Exchange">
            <summary>
            所绑定的交换机
            </summary>
        </member>
        <member name="T:SuperGMS.MQ.RabbitMQ.VirtualHost">
            <summary>
            虚拟主机
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.VirtualHost.HostName">
            <summary>
            虚拟主机名
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.VirtualHost.Host">
            <summary>
            物理主机，ip或者机器名称，用于建立连接
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.VirtualHost.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.VirtualHost.Username">
            <summary>
            登录名
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.VirtualHost.Password">
            <summary>
            登录密码
            </summary>
        </member>
        <member name="P:SuperGMS.MQ.RabbitMQ.VirtualHost.NoAckMsgCount">
            <summary>
            最大允许未Ack的消息数量
            </summary>
        </member>
        <member name="T:SuperGMS.MQ.RabbitMQ.MessageReceiveHandle">
            <summary>
            收到消息触发的回调
            </summary>
            <param name="args">args</param>
            <param name="ex">ex</param>
            <returns>bool</returns>
        </member>
        <member name="T:SuperGMS.MQ.RabbitMQ.Consumer">
            <summary>
            实现一个消费者
            </summary>
        </member>
        <member name="E:SuperGMS.MQ.RabbitMQ.Consumer.OnMessageReceive">
            <summary>
            当收到消息触发的事件
            </summary>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.Consumer.#ctor(SuperGMS.MQ.RabbitMQ.MQueue)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.MQ.RabbitMQ.Consumer"/> class.
            实现一个消费者
            </summary>
            <param name="mQueue">mQueue</param>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.Consumer.Register">
            <summary>
            注册一个Consumer
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.Consumer.ReConnection(System.Object)">
            <summary>
            断线重连
            </summary>
            <param name="sender">sender</param>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.Consumer.initlize(RabbitMQ.Client.IModel)">
            <summary>
            initlize
            </summary>
            <param name="channel">channel</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.Consumer.callEvent(System.String,System.Exception)">
            <summary>
            单独分离出来就是为了捕获上层传过来的回调方法里面异常了，导致底层框架异常
            </summary>
            <param name="msg">msg</param>
            <param name="ex">ex</param>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.Consumer.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="T:SuperGMS.MQ.RabbitMQ.PullConsumer">
            <summary>
            实现一个主动拉取的消费者
            </summary>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.PullConsumer.#ctor(SuperGMS.MQ.RabbitMQ.MQueue)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.MQ.RabbitMQ.Consumer"/> class.
            实现一个消费者
            </summary>
            <param name="mQueue">mQueue</param>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.PullConsumer.Register">
            <summary>
            注册一个Consumer
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.PullConsumer.ReConnection(System.Object)">
            <summary>
            断线重连
            </summary>
            <param name="sender">sender</param>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.PullConsumer.Get">
            <summary>
            获取消息
            </summary>
            <param name="isAck"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.PullConsumer.AckOk(System.UInt64)">
            <summary>
            确认消息
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.PullConsumer.initlize(RabbitMQ.Client.IModel)">
            <summary>
            initlize
            </summary>
            <param name="channel">channel</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.PullConsumer.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="T:SuperGMS.MQ.RabbitMQ.MQConnection">
            <summary>
            MQConnection
            </summary>
        </member>
        <member name="T:SuperGMS.MQ.RabbitMQ.MQConnectionManager">
            <summary>
            ConnectionManager
            </summary>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.MQConnectionManager.RelaceConnection(SuperGMS.MQ.RabbitMQ.MQConnection,System.String)">
            <summary>
            把用完的连接返回连接池
            </summary>
            <param name="connection"></param>
            <param name="key"></param>
        </member>
        <member name="T:SuperGMS.MQ.RabbitMQ.MQEndPoint">
            <summary>
            实现一个连接MQ的节点
            </summary>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.MQEndPoint.#ctor(SuperGMS.MQ.RabbitMQ.MQueue)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.MQ.RabbitMQ.MQEndPoint"/> class.
            MQ的节点
            </summary>
            <param name="mQueue">mQueue</param>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.MQEndPoint.Run(System.Func{RabbitMQ.Client.IModel,System.Boolean})">
            <summary>
            建立一个连接，并执行指定的方法
            </summary>
            <param name="fn">fn</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.MQEndPoint.ReConnection(System.Object)">
            <summary>
            断线重连
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.MQEndPoint.Connection_ConnectionShutdown(System.Object,RabbitMQ.Client.ShutdownEventArgs)">
            <summary>
            连接关闭事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.MQEndPoint.Connection_ConnectionBlocked(System.Object,RabbitMQ.Client.Events.ConnectionBlockedEventArgs)">
            <summary>
            连接阻塞事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SuperGMS.MQ.RabbitMQ.Publisher">
            <summary>
            事件源发布一个消息
            </summary>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.Publisher.#ctor(SuperGMS.MQ.RabbitMQ.MQueue,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.MQ.RabbitMQ.Publisher"/> class.
            发布一个消息
            </summary>
            <param name="mQueue">队列</param>
            <param name="msg">消息内容</param>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.Publisher.Publish">
            <summary>
            发布
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.Publisher.ReConnection(System.Object)">
            <summary>
            断线重连
            </summary>
            <param name="sender">sender</param>
        </member>
        <member name="M:SuperGMS.MQ.RabbitMQ.Publisher.publish(RabbitMQ.Client.IModel)">
            <summary>
            发布消息
            </summary>
            <param name="channel">channel</param>
            <returns>bool</returns>
        </member>
        <member name="T:SuperGMS.Protocol.ApiProtocol.ApiArgs">
            <summary>
             可以有自由定义WebApi参数个格式，不走标准格式
            <see cref="T:SuperGMS.Protocol.ApiProtocol.ApiArgs" langword="" />
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.ApiProtocol.ApiArgs.Headers">
            <summary>
            Http请求的Header头
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.ApiProtocol.ApiArgs.Params">
            <summary>
            Url ？后面的参数
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.ApiProtocol.ApiArgs.Body">
            <summary>
            http body的内容
            </summary>
        </member>
        <member name="T:SuperGMS.Protocol.ApiProtocol.ApiResult">
             <summary>
            
             <see cref="T:SuperGMS.Protocol.ApiProtocol.ApiResult" langword="" />
             </summary>
        </member>
        <member name="P:SuperGMS.Protocol.ApiProtocol.ApiResult.Body">
            <summary>
            返回的Body内容
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.ApiProtocol.ApiResult.Headers">
            <summary>
            要写给客户端的Header内容
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.ApiProtocol.ApiResult.Cookies">
            <summary>
            写给客户端的cookies
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.ApiProtocol.ApiResult.ContentType">
            <summary>
            返回内容的格式
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.ApiProtocol.ApiResult.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.ApiProtocol.ApiResult.Code">
            <summary>
            返回给对方的HttpCode
            </summary>
        </member>
        <member name="T:SuperGMS.Protocol.MQProtocol.EventMsg`1">
            <summary>
            消息外壳
            </summary>
            <typeparam name="M"></typeparam>
        </member>
        <member name="M:SuperGMS.Protocol.MQProtocol.EventMsg`1.#ctor(System.String,`0,System.String,System.String)">
            <summary>
            消息
            </summary>
            <param name="eventName">事件名称</param>
            <param name="msg">消息实体</param>
            <param name="to">接受者，一个消息可以不标记接受者如广播消息</param>
            <param name="from">发送者，一个消息必须标记发送者即来源</param>
        </member>
        <member name="P:SuperGMS.Protocol.MQProtocol.EventMsg`1.Msg_id">
            <summary>
            消息唯一编号
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.MQProtocol.EventMsg`1.EventName">
            <summary>
            事件或消息名称
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.MQProtocol.EventMsg`1.Msg">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.MQProtocol.EventMsg`1.To">
            <summary>
            消息接收者
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.MQProtocol.EventMsg`1.From">
            <summary>
            消息发送者
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.MQProtocol.EventMsg`1.Context">
            <summary>
            需要传递的上下文内容
            </summary>
        </member>
        <member name="T:SuperGMS.Protocol.MQProtocol.MQProtocol`1">
            <summary>
            MQ的消息
            </summary>
            <typeparam name="M"></typeparam>
        </member>
        <member name="P:SuperGMS.Protocol.MQProtocol.MQProtocol`1.ExChange">
            <summary>
            所属交换机
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.MQProtocol.MQProtocol`1.RouterKey">
            <summary>
            路由关键字
            </summary>
        </member>
        <member name="M:SuperGMS.Protocol.MQProtocol.MQProtocol`1.#ctor(System.String,`0,System.String)">
            <summary>
            MQ的消息
            </summary>
            <param name="eventName"></param>
            <param name="msg"></param>
            <param name="from"></param>
        </member>
        <member name="M:SuperGMS.Protocol.MQProtocol.MQProtocol`1.Parse(System.String)">
            <summary>
            将字符串转换成MQProtocol
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Protocol.MQProtocol.MQProtocol`1.ToString">
            <summary>
            将对象转出Json字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.Protocol.RpcProtocol.Args`1">
            <summary>
            客户端请求的数据结构
            </summary>
            <typeparam name="A"> A </typeparam>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.Args`1.m">
            <summary>
            请求的业务名称
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.Args`1.mv">
            <summary>
            m的版本号
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.Args`1.ct">
            <summary>
            客户端类型
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.Args`1.cv">
            <summary>
            客户版本号
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.Args`1.rid">
            <summary>
            请求的id，一般用Guid，便于日志对应请求和响应，要求返还的ResponseId原样复制
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.Args`1.tk">
            <summary>
            授权令牌
            </summary>
        </member>
        <member name="T:SuperGMS.Protocol.RpcProtocol.ArgsEx">
            <summary>
            ArgsEx
            </summary>
        </member>
        <member name="M:SuperGMS.Protocol.RpcProtocol.ArgsEx.Copy(SuperGMS.Protocol.RpcProtocol.Args{System.Object})">
            <summary>
            拷贝一个当前上下文的args，作为下一个内部调用的args使用，
            这里除了m和v没有拷贝，需要调用时赋值，其他都会原样拷贝结构和值
            </summary>
            <param name="args">当前上下文的args</param>
            <returns>返回除了m和v之外全新的Args</returns>
        </member>
        <member name="T:SuperGMS.Protocol.RpcProtocol.BasicArgs`1">
            <summary>
            统一参数的基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.BasicArgs`1.cs">
            <summary>
            校验值
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.BasicArgs`1.v">
            <summary>
            业务数据
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.BasicArgs`1.icp">
            <summary>
            当前传输的是否密文,这里说的加密指的是对有效业务数据的加密指的是_Value;
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.BasicArgs`1.uri">
            <summary>
            可以路由的Uri
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.BasicArgs`1.lg">
            <summary>
            语言
            </summary>
        </member>
        <member name="T:SuperGMS.Protocol.RpcProtocol.ClientType">
            <summary>
            ClientType
            </summary>
        </member>
        <member name="F:SuperGMS.Protocol.RpcProtocol.ClientType.Web">
            <summary>
            web前端，需要检查接入ip或者域名
            </summary>
        </member>
        <member name="F:SuperGMS.Protocol.RpcProtocol.ClientType.App">
            <summary>
            移动app
            </summary>
        </member>
        <member name="F:SuperGMS.Protocol.RpcProtocol.ClientType.WeiXin">
            <summary>
            微信
            </summary>
        </member>
        <member name="F:SuperGMS.Protocol.RpcProtocol.ClientType.ThirdPart">
            <summary>
            第三方
            </summary>
        </member>
        <member name="F:SuperGMS.Protocol.RpcProtocol.ClientType.InnerRpc">
            <summary>
            内部微服务，前端接入层会拦截这个类型
            </summary>
        </member>
        <member name="F:SuperGMS.Protocol.RpcProtocol.ClientType.Unkunwn">
            <summary>
            未知类型
            </summary>
        </member>
        <member name="T:SuperGMS.Protocol.RpcProtocol.ClientTypeParser">
            <summary>
            客户端转换类
            </summary>
        </member>
        <member name="M:SuperGMS.Protocol.RpcProtocol.ClientTypeParser.Parser(System.String)">
            <summary>
            转换客户端类型为枚举
            </summary>
            <param name="clientType"> 客户端类型字符串</param>
            <returns>枚举</returns>
        </member>
        <member name="T:SuperGMS.Protocol.RpcProtocol.HeaderValue">
            <summary>
            Header
            </summary>
        </member>
        <member name="F:SuperGMS.Protocol.RpcProtocol.HeaderValue.REMOTEIP">
            <summary>
            请求客户端ip，这个主要由httpProxy获取前端请求的ip地址，
            注意这里不是ngix或者slb获取前端硬件负载的ip，是一个外网地址
            </summary>
        </member>
        <member name="F:SuperGMS.Protocol.RpcProtocol.HeaderValue.REFFER">
            <summary>
            远程请求的引用url，这个主要有httpProxy获取并添加
            一般用来验证来源url
            </summary>
        </member>
        <member name="F:SuperGMS.Protocol.RpcProtocol.HeaderValue.INNERIP">
            <summary>
            这个主要记录内部请求客户端的ip
            </summary>
        </member>
        <member name="F:SuperGMS.Protocol.RpcProtocol.HeaderValue.USERAGENT">
            <summary>
            客户端设备信息
            </summary>
        </member>
        <member name="F:SuperGMS.Protocol.RpcProtocol.HeaderValue.HOST">
            <summary>
            请求的域名
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.HeaderValue.ServerName">
            <summary>
            用于标记这个值是哪个服务器添加的，组成结构：微服务名称(pool)_ip:port_机器名称
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.HeaderValue.Key">
            <summary>
            放入值得key
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.HeaderValue.Value">
            <summary>
            放入的value
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.HeaderValue.Ts">
            <summary>
            当前时间
            </summary>
        </member>
        <member name="T:SuperGMS.Protocol.RpcProtocol.Result`1">
            <summary>
            请求返回结果
            </summary>
            <typeparam name="R"></typeparam>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.Result`1.rid">
            <summary>
            响应的Id，跟RequestId对应
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.Result`1.c">
            <summary>
            业务处理状态
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.Result`1.msg">
            <summary>
            状态描述
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.Result`1.error">
            <summary>
            错误描述
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.StatusCode.code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.StatusCode.msg">
            <summary>
            状态码描述
            </summary>
        </member>
        <member name="M:SuperGMS.Protocol.RpcProtocol.StatusCode.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.Protocol.RpcProtocol.StatusCode"/> class.
            OK=200,//成功
              MethodNotExist=404,//方法不存在
              ServerError=500,//服务器内部错误
              BadRequest=400,//非法请求
              Unauthorized=401,//访问需要授权的资源，如密码登陆等...
             ArgesError=403,//参数错误，服务器无法解析
             如果你所定义的状态码在以上列表中存在，并且表达的意思一样，请直接StatusCode.OK这样使用，如果没有
             可以自定义600以上
            </summary>
            <param name="code">状态码</param>
            <param name="msg">状态码描述</param>
        </member>
        <member name="M:SuperGMS.Protocol.RpcProtocol.StatusCode.#ctor(System.Int32,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.Protocol.RpcProtocol.StatusCode"/> class.
            OK=200,//成功
              MethodNotExist=404,//方法不存在
              ServerError=500,//服务器内部错误
              BadRequest=400,//非法请求
              Unauthorized=401,//访问需要授权的资源，如密码登陆等...
             ArgesError=403,//参数错误，服务器无法解析
             如果你所定义的状态码在以上列表中存在，并且表达的意思一样，请直接StatusCode.OK这样使用，如果没有
             可以自定义600以上
            </summary>
            <param name="code">状态码</param>
            <param name="msg">状态码描述</param>
            <param name="msgParam">msg的多语言部分参数</param>
        </member>
        <member name="M:SuperGMS.Protocol.RpcProtocol.StatusCode.GetCode(System.Int32,System.String)">
            <summary>
            框架自己用，外部业务不能用，请用正常的构造，
            外面不知道当前的状态码是否为系统预留，只知道状态码的值和msg，这个不能用作业务状态码的生成
            </summary>
            <param name="code">code</param>
            <param name="msg">msg</param>
            <returns>StatusCode</returns>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.StatusCode.IsSuccess">
            <summary>
            判断code是否成功，
            code == 200 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Protocol.RpcProtocol.StatusCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.Protocol.RpcProtocol.StatusCode"/> class.
            内部用，不让外部用，外部用必须走有参构造，便于验证是否占用了预留状态码却表达了不同的含义
            </summary>
        </member>
        <member name="M:SuperGMS.Protocol.RpcProtocol.StatusCode.CodeParser.isCode(System.Int32,SuperGMS.Protocol.RpcProtocol.StatusCode.Code@)">
            <summary>
            检查是否是已经存在的值
            </summary>
            <param name="s">s</param>
            <returns>bool</returns>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.StatusCode.OK">
            <summary>
            成功
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.StatusCode.LoginFailed">
            <summary>
            登陆失效
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.StatusCode.MethodNotExist">
            <summary>
            请求方法不存在
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.StatusCode.ServerError">
            <summary>
            服务器内部错误
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.StatusCode.BadRequest">
            <summary>
            非法请求
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.StatusCode.Unauthorized">
            <summary>
            访问未授权的资源
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.StatusCode.ArgesError">
            <summary>
            参数错误
            </summary>
        </member>
        <member name="P:SuperGMS.Protocol.RpcProtocol.StatusCode.ErrorCodeUndefined">
            <summary>
            错误码未定义错误
            </summary>
        </member>
        <member name="T:SuperGMS.Redis.RedisProxy">
            <summary>
            Redis高级操作
            </summary>
            <summary>
            访问redis的一个本地代理
            </summary>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.PushQueue(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Redis是单进程单线程，不存在并发问题，因此只要保证多条命令原则执行即可
            </summary>
            <param name="nodeName">节点名称</param>
            <param name="logicName">业务名称</param>
            <param name="key">队列名称</param>
            <param name="value">值</param>
            <param name="queueSize">值</param>
            <returns>是否</returns>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.PopAllQueue(System.String,System.String,System.String)">
            <summary>
            弹出 最大的日志信息
            </summary>
            <param name="nodeName">节点名称</param>
            <param name="logicName">业务名称</param>
            <param name="key">队列名称</param>
            <returns>最大数量日志</returns>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.IsExistCfg(System.String)">
            <summary>
            是哦夫存在节点配置
            </summary>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.Set(System.String,System.String,System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个string value
            </summary>
            <param name="nodeName">节点名称</param>
            <param name="logicName">业务名称</param>
            <param name="key">key</param>
            <param name="value">value</param>
            <param name="expiry">过期时间</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.SetHash``1(System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,``0})">
            <summary>
            存储一个key value的HashSet
            </summary>
            <param name="nodeName">节点名称</param>
            <param name="logicName">业务名称</param>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.StringIncrement(System.String,System.String,System.String,System.Int64)">
            <summary>
            给一个指定的key字符串，增加value的计数
            </summary>
            <param name="nodeName">nodeName</param>
            <param name="logicName">logicName</param>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.StringDecrement(System.String,System.String,System.String,System.Int64)">
            <summary>
            给一个指定的key字符串，减去value的计数
            </summary>
            <param name="nodeName">nodeName</param>
            <param name="logicName">logicName</param>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.HashIncrement(System.String,System.String,System.String,System.String,System.Int64)">
            <summary>
            给一个指定的key的某一个filed增加value个计数
            </summary>
            <param name="nodeName">nodeName</param>
            <param name="logicName">logicName</param>
            <param name="key">key</param>
            <param name="filed">filed</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.HashDecrement(System.String,System.String,System.String,System.String,System.Int64)">
            <summary>
            给一个指定的key的某一个filed减去value个计数
            </summary>
            <param name="nodeName">nodeName</param>
            <param name="logicName">logicName</param>
            <param name="key">key</param>
            <param name="filed">filed</param>
            <param name="value">value</param>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.GetHash``1(System.String,System.String,System.String,System.String)">
            <summary>
            获取Hash字段值
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="nodeName">nodeName</param>
            <param name="logicName">logicName</param>
            <param name="key">key</param>
            <param name="filed">filed</param>
            <returns>TT</returns>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.GetHashAll``1(System.String,System.String,System.String)">
            <summary>
            获取整个Hash表
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="nodeName">nodeName</param>
            <param name="logicName">logicName</param>
            <param name="key">key</param>
            <returns>static</returns>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.RemoveHashKey(System.String,System.String,System.String,System.String)">
            <summary>
            移除指定key值
            </summary>
            <param name="nodeName">nodeName</param>
            <param name="logicName">logicName</param>
            <param name="key">key</param>
            <param name="filed">filed</param>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.SetHash``1(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            这个方法最好不要用，因为你在外部构建一个IDictionary需要循环一次，
            扔里面来里面再循环一次，做了没有意义的事情，所以在外面就直接调用KeyValuePair的参数吧
            </summary>
            <param name="nodeName">节点名称</param>
            <param name="logicName">业务名称</param>
            <param name="key">key</param>
            <param name="values">values</param>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.Set``1(System.String,System.String,System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            存放key为Obj的对象到模型nodeName下面
            </summary>
            <typeparam name="T">要存储的对象Type</typeparam>
            <param name="nodeName">节点名称</param>
            <param name="logicName">业务名称</param>
            <param name="key">key</param>
            <param name="obj">要存储的对象</param>
            <param name="expiry">过期时间，一般不指定，使用默认</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.Get(System.String,System.String,System.String)">
            <summary>
            获取字符串对象
            </summary>
            <param name="nodeName">节点名称</param>
            <param name="logicName">业务名称</param>
            <param name="key">key</param>
            <returns>string</returns>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.Get``1(System.String,System.String,System.String)">
            <summary>
            获取某个模型下面的特定key的值
            </summary>
            <typeparam name="T">存储对象</typeparam>
            <param name="nodeName">节点名称</param>
            <param name="logicName">业务名称</param>
            <param name="key">key</param>
            <returns>T</returns>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.RemoveKey(System.String,System.String,System.String)">
            <summary>
            移除某个key的值
            </summary>
            <param name="nodeName">节点名称</param>
            <param name="logicName">业务名称</param>
            <param name="key">key</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Redis.RedisProxy.ContainsKey(System.String,System.String,System.String)">
            <summary>
            查询指定的key是否存在
            </summary>
            <param name="nodeName"></param>
            <param name="logicName">logicName</param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Redis.RedisConfig.InitlizeServerList(SuperGMS.Config.RedisConfig)">
            <summary>
            初始化服务器配置
            </summary>
            <returns>服务器配置列表</returns>
        </member>
        <member name="M:SuperGMS.Redis.RedisConfig.Initlize(SuperGMS.Config.RedisConfig)">
            <summary>
            初始化redis集群的节点
            </summary>
        </member>
        <member name="M:SuperGMS.Redis.RedisConfig.GetNode(System.String)">
            <summary>
            通过业务节点名称获取节点配置
            </summary>
            <param name="nodeName">nodeName</param>
            <returns>RedisNode</returns>
        </member>
        <member name="T:SuperGMS.Redis.RedisConnectionManager">
            <summary>
            Redis链接的管理器,主要是根据业务模型+索引来管理连接
            </summary>
        </member>
        <member name="M:SuperGMS.Redis.RedisConnectionManager.GetConnection(SuperGMS.Redis.RedisServer)">
            <summary>
            单例获取
            </summary>
        </member>
        <member name="M:SuperGMS.Redis.RedisConnectionManager.Dispose(SuperGMS.Redis.RedisServer,StackExchange.Redis.ConnectionMultiplexer)">
            <summary>
            释放掉坏掉的连接
            </summary>
            <param name="srvCfg">srvCfg</param>
            <param name="conn">conn</param>
        </member>
        <member name="T:SuperGMS.Redis.RedisNode">
            <summary>
            业务模型节点，在此模型下可能会存在多个redis服务器，共同实现当前业务Node的功能
            会根据模型的特点，实现主从，或者单主，或者同质节点
            </summary>
        </member>
        <member name="P:SuperGMS.Redis.RedisNode.NodeName">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:SuperGMS.Redis.RedisNode.IsMasterSlave">
            <summary>
            是否支持主从
            </summary>
        </member>
        <member name="P:SuperGMS.Redis.RedisNode.SlaveServers">
            <summary>
            从节点
            </summary>
        </member>
        <member name="P:SuperGMS.Redis.RedisNode.MasterServer">
            <summary>
            主节点，如果不区分主从，全部按从来取
            </summary>
        </member>
        <member name="M:SuperGMS.Redis.RedisNode.Set(System.Func{StackExchange.Redis.IDatabase,System.Boolean})">
            <summary>
            写库
            </summary>
            <param name="fn">fn</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Redis.RedisNode.Get``1(System.Func{StackExchange.Redis.IDatabase,``0})">
            <summary>
            查库
            </summary>
            <param name="fn">fn</param>
            <returns>T</returns>
        </member>
        <member name="M:SuperGMS.Redis.RedisNode.setMaster(System.Func{StackExchange.Redis.IDatabase,System.Boolean})">
            <summary>
            操作主库，一般都是set操作
            </summary>
            <param name="fn">fn</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Redis.RedisNode.setSlave(System.Func{StackExchange.Redis.IDatabase,System.Boolean})">
            <summary>
            操作从库，一般是不分主从的set,不能乱了
            </summary>
            <param name="fn">fn</param>
            <returns>bool</returns>
        </member>
        <member name="T:SuperGMS.Redis.RedisServer">
            <summary>
            定义一个redis服务器对象
            </summary>
        </member>
        <member name="P:SuperGMS.Redis.RedisServer.Node">
            <summary>
            所在业务节点
            </summary>
        </member>
        <member name="P:SuperGMS.Redis.RedisServer.Pool">
            <summary>
            索引
            </summary>
        </member>
        <member name="P:SuperGMS.Redis.RedisServer.IsMaster">
            <summary>
            是否主
            </summary>
        </member>
        <member name="P:SuperGMS.Redis.RedisServer.Server">
            <summary>
            服务器名称或者ip
            </summary>
        </member>
        <member name="P:SuperGMS.Redis.RedisServer.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:SuperGMS.Redis.RedisServer.AllowAdmin">
            <summary>
            是否可以执行带有风险性指令
            </summary>
        </member>
        <member name="P:SuperGMS.Redis.RedisServer.ConnectTimeout">
            <summary>
            链接超时时间，一般用默认（配置为0表示默认）
            </summary>
        </member>
        <member name="P:SuperGMS.Redis.RedisServer.Ssl">
            <summary>
            是否需要密码
            </summary>
        </member>
        <member name="P:SuperGMS.Redis.RedisServer.Ssl2">
            <summary>
            新加redis ssl配置，为了兼容老的ssl 默认是false
            </summary>
        </member>
        <member name="P:SuperGMS.Redis.RedisServer.Pwd">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:SuperGMS.Redis.RedisServer.DbIndex">
            <summary>
            redis 数据库索引
            </summary>
        </member>
        <member name="M:SuperGMS.Router.RouterManager.GetPolling(System.Int32,System.Int32)">
            <summary>
            顺序轮询
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Router.RouterManager.GetRandom(System.Int32,System.Int32)">
            <summary>
            随机获取服务器
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="F:SuperGMS.Router.RouterType.Hash">
            <summary>
            一致性Hash 
            </summary>
        </member>
        <member name="F:SuperGMS.Router.RouterType.Random">
            <summary>
            随机
            </summary>
        </member>
        <member name="F:SuperGMS.Router.RouterType.Polling">
            <summary>
            轮询
            </summary>
        </member>
        <member name="T:SuperGMS.Router.RouterTypeParse">
            <summary>
            路由类型转换
            </summary>
        </member>
        <member name="M:SuperGMS.Router.RouterTypeParse.Parse(System.String)">
            <summary>
            路由类型转换
            </summary>
            <param name="routerType"></param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.Router.TTIDUri">
            <summary>
            TTIDUri
            </summary>
        </member>
        <member name="T:SuperGMS.Router.UserUri">
            <summary>
            UserUri
            </summary>
        </member>
        <member name="T:SuperGMS.Rpc.AssemblyTools.AssemblyToolProxy">
            <summary>
            根据程序集自动生成Proxy代理类
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.AssemblyTools.AssemblyToolProxy.Create(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            创建主方法
            </summary>
            <param name="path">dll 路径</param>
            <param name="outPutDir">输出proxy.cs 文件路径</param>
            <param name="template">模板</param>
            <param name="templateBody">模板主体</param>
            <param name="interfaceBody">接口主体</param>
            <returns>返回是否创建成功</returns>
        </member>
        <member name="M:SuperGMS.Rpc.AssemblyTools.AssemblyToolProxy.GetCurrentAppName(System.Reflection.Assembly)">
            <summary>
            根据服务命名空间获取名称, 这个需要和框架保持一致.
            </summary>
            <param name="asLoad">程序集</param>
            <returns>短名称</returns>
        </member>
        <member name="M:SuperGMS.Rpc.AssemblyTools.AssemblyToolProxy.LoadAssembly(System.String)">
            <summary>
            加载程序集
            </summary>
            <param name="path">路径</param>
            <returns>程序集</returns>
        </member>
        <member name="M:SuperGMS.Rpc.AssemblyTools.AssemblyToolProxy.SaveFile(System.String,System.String)">
            <summary>
            将生成好的代理类保存到指定路径
            </summary>
            <param name="content">代理类内容</param>
            <param name="path">路径</param>
            <returns>保存是否成功</returns>
        </member>
        <member name="M:SuperGMS.Rpc.AssemblyTools.AssemblyToolProxy.GetTypeName(System.Type)">
            <summary>
            获取Type类型
            </summary>
        </member>
        <member name="T:SuperGMS.Rpc.ClientItem">
            <summary>
            客户端配置
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.ClientItem.Ip">
            <summary>
            Gets or sets ip
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.ClientItem.Port">
            <summary>
            Gets or sets 端口
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.ClientItem.ServerType">
            <summary>
            Gets or sets 服务器发布类型
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.ClientItem.Url">
            <summary>
            Gets or sets 如果是Wcf配置到根路径
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.ClientItem.Pool">
            <summary>
            Gets or sets 服务编号
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.ClientItem.TimeOut">
            <summary>
            Timeout
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.ClientItem.Enable">
            <summary>
            是否被下线
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.ClientItem.Server">
            <summary>
            Gets or sets 所在的logic Server
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.ClientItem.ToString">
            <summary>
            拼接所有属性
            </summary>
            <returns>所有属性</returns>
        </member>
        <member name="T:SuperGMS.Rpc.ClientServer">
            <summary>
            客户端所对应的所有的可调用的服务端
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.ClientServer.ServerName">
            <summary>
            Gets or sets logic ServerName
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.ClientServer.RouterType">
            <summary>
            Gets or sets 负载策略
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.ClientServer.Client">
            <summary>
            Gets 所有负载节点
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.ClientServer.UpdateClient(SuperGMS.Rpc.ClientItem[],System.Boolean)">
            <summary>
            更新客户端列表
            </summary>
            <param name="li">更新列表</param>
            <param name="update">update=true,delete =false</param>
        </member>
        <member name="M:SuperGMS.Rpc.ClientServer.ToString">
            <summary>
            输出ServerName 和 RouterType
            </summary>
            <returns>输出内容</returns>
        </member>
        <member name="T:SuperGMS.Rpc.Client.ClientConnectionManager">
            <summary>
            thrift 连接池管理类
            </summary>
        </member>
        <member name="F:SuperGMS.Rpc.Client.ClientConnectionManager.ConnectionPools">
            <summary>
            根据服务器的ip和端口来保存当前客户端到这台服务器的所有连接, DataTime 是最后连接时间
            </summary>
            <example> <![CDATA[ Dictionary<ip, List<一个连接>> ]]></example>
        </member>
        <member name="M:SuperGMS.Rpc.Client.ClientConnectionManager.GetClient(SuperGMS.Rpc.ClientItem)">
            <summary>
            获取一个到指定服务器的连接
            </summary>
            <param name="item">配置信息</param>
            <returns>rpc连接</returns>
        </member>
        <member name="M:SuperGMS.Rpc.Client.ClientConnectionManager.ReleaseClient(SuperGMS.Rpc.ISuperGMSRpcClient)">
            <summary>
            释放连接回到连接池，回到连接池的连接都是可用的，
            连接只有在用的时候才会检查状态
            </summary>
            <param name="client"> 客户端</param>
        </member>
        <member name="M:SuperGMS.Rpc.Client.ClientConnectionManager.Dispose">
            <summary>
            将连接池所有连接全部释放
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.Client.ClientConnectionManager.Register(SuperGMS.Rpc.ClientItem)">
            <summary>
            新建一个连接
            </summary>
            <param name="item">连接配置</param>
            <returns>连接</returns>
        </member>
        <member name="M:SuperGMS.Rpc.Client.ClientConnectionManager.Clear">
            <summary>
            这里需要定时清理不用的连接
            </summary>
        </member>
        <member name="T:SuperGMS.Rpc.Client.RpcClientManager">
            <summary>
            注册Rpc客户端
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.Client.RpcClientManager.Register(System.String)">
            <summary>
            根据微服务的名字拉取配置地址
            </summary>
            <param name="appName">appName</param>
        </member>
        <member name="M:SuperGMS.Rpc.Client.RpcClientManager.Register(SuperGMS.Rpc.ClientServer)">
            <summary>
            更新本地
            </summary>
            <param name="server">rpc 远端配置</param>
        </member>
        <member name="M:SuperGMS.Rpc.Client.RpcClientManager.Send``2(System.String,System.String,``0,SuperGMS.Rpc.Server.RpcContext,SuperGMS.Protocol.RpcProtocol.StatusCode@)">
            <summary>
            客户端Rpc调用
            </summary>
            <typeparam name="R">R</typeparam>
            <typeparam name="A">A</typeparam>
            <param name="server">server</param>
            <param name="m">m</param>
            <param name="args">args</param>
            <param name="code">code</param>
            <returns>RR</returns>
        </member>
        <member name="M:SuperGMS.Rpc.Client.RpcClientManager.Send(SuperGMS.Protocol.RpcProtocol.Args{System.Object},System.String)">
            <summary>
            代理层使用
            </summary>
            <param name="args">参数</param>
            <param name="url">前端要求将M值体现在路径上，接入层自己来做个转换处理</param>
            <returns>string,参数</returns>
        </member>
        <member name="M:SuperGMS.Rpc.Client.RpcClientManager.Dispose">
            <summary>
            释放全部客户端
            </summary>
        </member>
        <member name="T:SuperGMS.Rpc.ConfigTemplate">
            <summary>
            ConfigTemplate
            </summary>
        </member>
        <member name="T:SuperGMS.Rpc.HttpWebApi.WebApiClient">
            <summary>
            GrantWebApiClient
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.HttpWebApi.WebApiClient.Item">
            <inheritdoc />
        </member>
        <member name="T:SuperGMS.Rpc.HttpWebApi.WebApiServer">
            <summary>
            GrantWebApi
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.ISuperGMSRpcClient.Item">
            <summary>
            连接信息
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.ISuperGMSRpcClient.Send(System.String,System.String,System.String@)">
            <summary>
            发送数据
            </summary>
            <param name="server"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Rpc.ISuperGMSRpcClient.Close">
            <summary>
            关闭掉,物理释放，这里把Dispose特殊用途了，
            所以另外起了个关闭的名字，不清楚不要随便用
            </summary>
        </member>
        <member name="T:SuperGMS.Rpc.ISuperGMSRpcServer">
            <summary>
            微服务接口
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.ISuperGMSRpcServer.QtDispose">
            <summary>
            程序停止时，回收系统资源，包括调用应用标记的回收方法
            </summary>
            <returns>回收结果</returns>
        </member>
        <member name="M:SuperGMS.Rpc.ISuperGMSRpcServer.RpcServerRegister(SuperGMS.Rpc.SuperGMSServerConfig)">
            <summary>
            注册一个本地的服务
            </summary>
            <param name="server">服务配置</param>
        </member>
        <member name="T:SuperGMS.Rpc.ISync">
            <summary>
            消息接口, Thrift 直接调用此接口的 Send 方法
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.ISync.Send(System.String,System.Object)">
            <summary>
            发送
            </summary>
            <param name="my_args">参数</param>
            <param name="appContext">调用上下文</param>
            <returns>返回结果</returns>
        </member>
        <member name="T:SuperGMS.Rpc.Manage.ServerManager">
            <summary>
            Rpc服务器的管理器
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.Manage.ServerManager.Register(SuperGMS.Rpc.SuperGMSServer[])">
            <summary>
            要注册的服务器列表，注意一个服务只能注册一次，否则会失败（port不能重复注册）
            </summary>
            <param name="servers"></param>
        </member>
        <member name="M:SuperGMS.Rpc.Manage.ServerManager.RegisterServer(SuperGMS.Rpc.SuperGMSServer[])">
            <summary>
            主从RpcServer
            </summary>
            <param name="servers"></param>
        </member>
        <member name="T:SuperGMS.Rpc.Nullables">
            <summary>
            系统可空类型
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.ServerProxy.HttpSend(System.String,System.Object)">
            <summary>
            httpProxy做完业务处理时的调用方式，这些参数直接从前端来的，不用做转换
            </summary>
            <param name="args"></param>
            <param name="appContext"></param>
            <returns></returns>
        </member>
        <member name="F:SuperGMS.Rpc.ServerStatus.Running">
            <summary>
            运行
            </summary>
        </member>
        <member name="F:SuperGMS.Rpc.ServerStatus.NotExist">
            <summary>
            不存在，要么没安装，要么已卸载
            </summary>
        </member>
        <member name="F:SuperGMS.Rpc.ServerStatus.ErrorStop">
            <summary>
            异常停止
            </summary>
        </member>
        <member name="T:SuperGMS.Rpc.ServerType">
            <summary>
            服务器发布类型
            </summary>
        </member>
        <member name="F:SuperGMS.Rpc.ServerType.WCF">
            <summary>
            服务器接口发布为
            </summary>
        </member>
        <member name="F:SuperGMS.Rpc.ServerType.Thrift">
            <summary>
            服务器接口发布为ThriftRpc
            </summary>
        </member>
        <member name="F:SuperGMS.Rpc.ServerType.Grpc">
            <summary>
            服务接口发布为Grpc
            </summary>
        </member>
        <member name="F:SuperGMS.Rpc.ServerType.TaskWorker">
            <summary>
            不用发布接口，只执行定时任务
            </summary>
        </member>
        <member name="F:SuperGMS.Rpc.ServerType.HttpProxy">
            <summary>
            代理层
            </summary>
        </member>
        <member name="F:SuperGMS.Rpc.ServerType.Http">
            <summary>
            跨网关http
            </summary>
        </member>
        <member name="F:SuperGMS.Rpc.ServerType.HttpWebApi">
            <summary>
            做为WebApi直接处理业务
            </summary>
        </member>
        <member name="T:SuperGMS.Rpc.ServerTypeParse">
            <summary>
            服务器发布类型转换类
            </summary>
        </member>
        <member name="T:SuperGMS.Rpc.Server.InitlizeMethodAttribute">
            <summary>
            微服务启动中需要初始化的方法标签, 此标签必须同时标记类 和 方法才生效
            </summary>
        </member>
        <member name="T:SuperGMS.Rpc.Server.RpcBaseServer`2">
            <summary>
            所有分布式微服务的基类，底层封装了自动负载路由和协议，完全控制了对象的自动创建和释放，
            你要注意的是：在这些RpcBaseServer中不能出现长轮训或者不能跟Process方法同步返回的线程，因为Process方法返回后
            底层帮你彻底将对象释放掉了，你的线程也随之回收，要长轮训，请使用TaskWorker类，要使用
            </summary>
            <typeparam name="A">A</typeparam>
            <typeparam name="R">R</typeparam>
        </member>
        <member name="F:SuperGMS.Rpc.Server.RpcBaseServer`2.code">
             <summary>
            
             </summary>
        </member>
        <member name="P:SuperGMS.Rpc.Server.RpcBaseServer`2.Context">
            <summary>
            Gets 当前的请求上下午
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcBaseServer`2.Check(`0,SuperGMS.Protocol.RpcProtocol.StatusCode@)">
            <summary>
            默认只检查登录，如果额外需要检查权限，请自己覆盖Check方法，返回CheckRights即可
            </summary>
            <param name="args">args</param>
            <param name="code">code</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcBaseServer`2.CheckLogin(`0,SuperGMS.Protocol.RpcProtocol.StatusCode@)">
            <summary>
            登录验证
            </summary>
            <param name="args">args</param>
            <param name="loginCode">code</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcBaseServer`2.CheckRights(`0,SuperGMS.Protocol.RpcProtocol.StatusCode@)">
            <summary>
            登录验证,并检查权限（服务Check方法不重载时默认调用此方法)
            </summary>
            <param name="args">args</param>
            <param name="rightCode">code</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcBaseServer`2.AnalyzeArgs(SuperGMS.Protocol.RpcProtocol.Args{System.Object},SuperGMS.Protocol.RpcProtocol.StatusCode@)">
            <summary>
            解析参数
            </summary>
            <param name="args"></param>
            <param name="analyzeCode"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcBaseServer`2.RunInner(`0,SuperGMS.Protocol.RpcProtocol.StatusCode@,SuperGMS.Rpc.Server.RpcContext,System.Object)">
            <summary>
            内部调用使用此方法可以简化
            本来想命名Run的但是，反射的时候会出现同名二义性，所以只能另起他名
            </summary>
            <param name="args"></param>
            <param name="c"></param>
            <param name="rpcContext"></param>
            <param name="objValue"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcBaseServer`2.Run(SuperGMS.Protocol.RpcProtocol.Args{System.Object},SuperGMS.Protocol.RpcProtocol.StatusCode@,System.Object)">
            <summary>
            接口运行的方法入口
            </summary>
            <param name="args">args</param>
            <param name="c">c</param>
            <param name="objValue">objValue 这个一定不是RpcContext 这个是用户想传的自己的数据，通常情况下可以传null，tk和其他参数全部在args中</param>
            <returns>Result</returns>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcBaseServer`2.Process(`0,SuperGMS.Protocol.RpcProtocol.StatusCode@)">
            <summary>
             需要具体业务的实现类，完成具体的业务
            </summary>
            <param name="valueArgs">业务类中定义的目标参数值_Value</param>
            <param name="code">Process处理过程中的状态码，为了强制子类给code赋值，这里写成out</param>
            <returns>R</returns>
        </member>
        <member name="T:SuperGMS.Rpc.Server.RpcContext">
            <summary>
            一个用于传递上下文信息的容器
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcContext.#ctor(System.Object,SuperGMS.Protocol.RpcProtocol.Args{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.Rpc.Server.RpcContext"/> class.
            一个用于传递上下文信息的容器
            </summary>
            <param name="objValue">objValue 这个一定不是RpcContext,而是用户自己想传的自己的值</param>
            <param name="args">用户请求的参数</param>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.Rpc.Server.RpcContext"/> class.
            一个用于传递上下文信息的容器
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.Server.RpcContext.ContextValue">
            <summary>
            Gets or sets 业务自己或者调用方想传递的上下文信息
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.Server.RpcContext.Args">
            <summary>
            Gets or sets 客户端请求的原始参数
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.Server.RpcContext.Uri">
            <summary>
            Gets or sets 可以路由的Uri
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.Server.RpcContext.Headers">
            <summary>
            Gets 请求的头信息
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.Server.RpcContext.Language">
            <summary>
            Gets or sets 语言
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcContext.CloneByToken(SuperGMS.Rpc.Server.RpcContext,System.String)">
            <summary>
            访问一个非上下文用户的Rpc请求时使用
            </summary>
            <param name="rpc">上下文的RpcContext</param>
            <param name="tk">非上下文用户的Token</param>
            <returns>一个非上下文的RpcContext</returns>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcContext.GetUserContext">
            <summary>
            获取当前用户, 在当前的Rpc请求周期内，只会初始化一次
            </summary>
            <returns>用户上下文</returns>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcContext.GetDbContext``1(System.Boolean)">
            <summary>
            注意：这个默认取的是EFDbContext,要用DapperDbContext请用GetDapperDbContext（）
            根据当前用户上下文来获取DbContext
            在同一个实现了GrantRpcBaseServer的上下文RpcContext同一个类型的
            DBContext共享同一个，在Process方法返回之后将会被全部销毁，所以在同一个
            RpcBaseServer中是可以保证事物的
            </summary>
            <param name="newOne">是否新创建，不共享，在多线程相互隔离的上下文中使用</param>
            <typeparam name="TContext">tcontext</typeparam>
            <returns>IGrantDbContext</returns>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcContext.GetDapperDbContext``1">
            <summary>
            获取Dapper的DbContext
            之所以要引入DapperDbContext是为了保持和EF在语法结构上的一致性，对上层开发人员不至于变化太大
            </summary>
            <typeparam name="TContext">TContext</typeparam>
            <returns>IGrantDapperDbContext</returns>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcContext.Dispose">
            <summary>
            释放的时候就不锁了，因为只有框架在释放，外部业务类看不到
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcContext.TryGetLock(System.String,System.Int32,System.Int32)">
            <summary>
            在当前上下文中获取一个分布式锁，第一个获取锁的将执行依赖当前key的完整业务流程（包括多个微服务之间的调用和数据库的访问）
            后来者将无法获取锁，根据返回的结果来判断是否进入流程，如果返回的锁为null将不能执行下面的流程，要么重试等待锁释放，要么返回错误
            var qtLock=TryGetLock(lockKey);
            if(qtLock==null) 提示不能同时执行操作； return；
            else  进行业务流程
            最后别忘了  qtLock.ReleaseLock();
            </summary>
            <param name="lockKey">要锁定的key，这里可以是单据号，或者业务中不允许并行处理的业务key</param>
            <param name="timeOut">获取等待时间，如果锁被占用，等待释放的时间，默认不等待</param>
            <param name="autoReleaseTime">自动释放的时间，建议用默认值</param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.Rpc.Server.RpcDistributer">
            <summary>
            一个Rpc分发器 ,
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcDistributer.#ctor(SuperGMS.Rpc.SuperGMSServerConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:SuperGMS.Rpc.Server.RpcDistributer"/> class.
            GrantRpcDistributer
            </summary>
            <param name="config">服务配置</param>
        </member>
        <member name="P:SuperGMS.Rpc.Server.RpcDistributer.ShortName">
            <summary>
            Gets 微服务注册名称
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcDistributer.Distributer(System.String,System.Object)">
            <summary>
            底层传输上来的协议内容
            </summary>
            <param name="args">args</param>
            <param name="context">context</param>
            <returns>string</returns>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcDistributer.Initlize(SuperGMS.Rpc.SuperGMSServerConfig)">
            <summary>
            初始化当前路径下所有的rpc类库
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcDistributer.isChildAppBase(System.Type)">
            <summary>
            isChildAppBase
            </summary>
            <param name="t">tt</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Rpc.Server.RpcDistributer.Dispose">
            <summary>
            通知业务服务请求停止，赶紧进行清理工作
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:SuperGMS.Rpc.Server.UnRegisterMethodAttribute">
            <summary>
            标记为当前属性的方法，将在服务卸载，停止时调用，来执行清理工作
            </summary>
        </member>
        <member name="T:SuperGMS.Rpc.SuperGMSBaseServer">
            <summary>
            实现一个Rpc Base服务 , 该服务提供注册方法, 以及发送消息方法, 以及接受消息的方法
            </summary>
        </member>
        <member name="F:SuperGMS.Rpc.SuperGMSBaseServer.distributer">
            <summary>
            服务发送, distributer 把收到的信息转发给Thrift
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.SuperGMSBaseServer.RpcServerRegister(SuperGMS.Rpc.SuperGMSServerConfig)">
            <summary>
            注册服务
            </summary>
            <param name="server">服务配置</param>
        </member>
        <member name="M:SuperGMS.Rpc.SuperGMSBaseServer.QtDispose">
            <summary>
            回收
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.SuperGMSBaseServer.Send(System.String,System.Object)">
            <summary>
            发送消息
            </summary>
            <param name="my_args">消息参数</param>
            <param name="appContext">上下文</param>
            <returns>发送结果</returns>
        </member>
        <member name="M:SuperGMS.Rpc.SuperGMSBaseServer.ServerRegister(SuperGMS.Rpc.SuperGMSServerConfig)">
            <summary>
            注册服务
            </summary>
            <param name="server">服务配置</param>
        </member>
        <member name="M:SuperGMS.Rpc.SuperGMSBaseServer.Dispose">
            <summary>
            抽象方法,重写后释放服务
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.SuperGMSBaseServer.OnReceive(System.String,System.Object)">
            <summary>
            接受到请求之后上层处理是一样的，不需要子类特殊实现，
            但是必须提供这样的可能性
            </summary>
            <param name="args">通信内容</param>
            <param name="appContext">上下文</param>
            <returns>返回接收人</returns>
        </member>
        <member name="T:SuperGMS.Rpc.SuperGMSServerConfig">
            <summary>
            服务配置
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.SuperGMSServerConfig.Port">
            <summary>
            Gets or sets 如果是基于Socket的调用需要这个参数（如Thrift）
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.SuperGMSServerConfig.PortList">
            <summary>
            集中配置
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.SuperGMSServerConfig.ServerType">
            <summary>
            Gets or sets server类型
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.SuperGMSServerConfig.AssemblyPath">
            <summary>
            Gets or sets 需要初始化程序集的路径
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.SuperGMSServerConfig.ServerName">
            <summary>
            Gets or sets 服务的逻辑名称，如message,kpi
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.SuperGMSServerConfig.Pool">
            <summary>
            Gets or sets 服务编号
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.SuperGMSServerConfig.Ip">
            <summary>
            预留一个Ip，因为在复杂的网络环境中，一个主机可能会有多个网卡和ip，这样就只能手工指定某个ip了
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.SuperGMSServerConfig.TimeOut">
            <summary>
            客户端超时时间
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.SuperGMSServerConfig.Enable">
            <summary>
            是否被下线
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.SuperGMSServerConfig.ToString">
            <summary>
            配置信息序列化
            </summary>
            <returns>拼接字符串</returns>
        </member>
        <member name="T:SuperGMS.Rpc.TaskWorker.TaskWorker">
            <summary>
            长轮询的一个Base服务
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.TaskWorker.TaskWorker.Dispose">
             <summary>
            
             </summary>
        </member>
        <member name="M:SuperGMS.Rpc.TaskWorker.TaskWorker.ServerRegister(SuperGMS.Rpc.SuperGMSServerConfig)">
            <summary>
            定时任务的服务不需要注册，直接通过InitlizeMethodAttribute属性初始化
            </summary>
            <param name="server"></param>
        </member>
        <member name="T:SuperGMS.Rpc.Thrift.Client.ThriftClient">
            <summary>
            客户端
            </summary>
        </member>
        <member name="P:SuperGMS.Rpc.Thrift.Client.ThriftClient.Item">
            <inheritdoc />
        </member>
        <member name="M:SuperGMS.Rpc.Thrift.Client.ThriftClient.#ctor(SuperGMS.Rpc.ClientItem)">
            <summary>
            打开一个Thrift 连接
            </summary>
            <param name="client">连接配置</param>
        </member>
        <member name="M:SuperGMS.Rpc.Thrift.Client.ThriftClient.Send(System.String,System.String,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:SuperGMS.Rpc.Thrift.Client.ThriftClient.Dispose">
            <summary>
            连接可用时,把用完的连接放入连接池
            否则释放掉
            </summary>
        </member>
        <member name="M:SuperGMS.Rpc.Thrift.Client.ThriftClient.Close">
            <summary>
            关闭连接，请慎用，这个主要是提供给连接池管理用来释放连接的
            业务千万不能用这个
            </summary>
        </member>
        <member name="T:SuperGMS.Rpc.Thrift.Server.ThriftRpcServer">
             <summary>
            
             </summary>
        </member>
        <member name="T:SuperGMS.Tools.C">
            <summary>
            简写类, 调用资源文件
            </summary>
        </member>
        <member name="M:SuperGMS.Tools.C.R(System.String,System.String)">
            <summary>
            方便用户直接使用C.R() 来获取资源文件,更少的参数，可以采用 RpcContext.R("key")
            </summary>
            <param name="resourceName">资源key</param>
            <param name="lang">语言种类</param>
            <returns>资源文字</returns>
        </member>
        <member name="T:SuperGMS.Tools.ComboxClass`1">
            <summary>
            1个泛型的可用复用的实体类
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="P:SuperGMS.Tools.ComboxClass`1.V1">
            <summary>
            Gets or sets 泛型类
            </summary>
        </member>
        <member name="T:SuperGMS.Tools.ComboxClass`2">
            <summary>
             2个泛型的可用复用的实体类
            </summary>
            <typeparam name="T1">类型1</typeparam>
            <typeparam name="T2">类型2</typeparam>
        </member>
        <member name="P:SuperGMS.Tools.ComboxClass`2.V2">
            <summary>
            Gets or sets v2 泛型
            </summary>
        </member>
        <member name="T:SuperGMS.Tools.ComboxClass`3">
            <summary>
             3个泛型的可用复用的实体类
            </summary>
            <typeparam name="T1">类型1</typeparam>
            <typeparam name="T2">类型2</typeparam>
            <typeparam name="T3">类型3</typeparam>
        </member>
        <member name="P:SuperGMS.Tools.ComboxClass`3.V3">
            <summary>
            Gets or sets V3
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SuperGMS.Tools.ComboxClass`4" -->
        <!-- Badly formed XML comment ignored for member "T:SuperGMS.Tools.ComboxClass`5" -->
        <!-- Badly formed XML comment ignored for member "T:SuperGMS.Tools.ComboxClass`6" -->
        <!-- Badly formed XML comment ignored for member "T:SuperGMS.Tools.ComboxClass`7" -->
        <member name="T:SuperGMS.Tools.EncryptionTools">
            <summary>
            加密工具集
            </summary>
        </member>
        <member name="M:SuperGMS.Tools.EncryptionTools.HashMd5(System.String,System.Boolean)">
            <summary>
            字符串转换为32位MD5大写或者小写
            </summary>
            <param name="input">要加密的字符串</param>
            <param name="toLower">转为小写，默认大写</param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Tools.EncryptionTools.Sha256(System.String)">
            <summary>
            SHA256
            </summary>
            /// <param name="str">原始字符串</param>
            <returns>结果</returns>
        </member>
        <member name="T:SuperGMS.Tools.ExtentionTool">
            <summary>
            扩展类
            </summary>
        </member>
        <member name="M:SuperGMS.Tools.ExtentionTool.GrantCopy``1(``0)">
            <summary>
            Copy 方法, 解决引用类型无法复制问题
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对象</param>
            <returns>新对象</returns>
        </member>
        <member name="T:SuperGMS.Tools.FileHelper">
            <summary>
            FileHelper
            </summary>
        </member>
        <member name="M:SuperGMS.Tools.FileHelper.ReadFile(System.String)">
            <summary>
            按路径读取文件
            </summary>
            <param name="filePath">文件的完整路径</param>
            <returns>文件内容</returns>
        </member>
        <member name="T:SuperGMS.Tools.HttpHelper">
            <summary>
            Http连接操作帮助类
            </summary>
        </member>
        <member name="M:SuperGMS.Tools.HttpHelper.GetHtml(SuperGMS.Tools.HttpItem)">
            <summary>
            根据相传入的数据，得到相应页面数据
            </summary>
            <param name="objhttpitem">参数类对象</param>
            <returns>返回HttpResult类型</returns>
        </member>
        <member name="M:SuperGMS.Tools.HttpHelper.GetMemoryStream(System.IO.Stream)">
            <summary>
            4.0以下.net版本取数据使用
            </summary>
            <param name="streamResponse">流</param>
        </member>
        <member name="M:SuperGMS.Tools.HttpHelper.SetRequest(SuperGMS.Tools.HttpItem)">
             <summary>
             为请求准备参数
             </summary>
            <param name="objhttpItem">参数列表</param>
        </member>
        <member name="M:SuperGMS.Tools.HttpHelper.SetCer(SuperGMS.Tools.HttpItem)">
            <summary>
            设置证书
            </summary>
            <param name="objhttpItem"></param>
        </member>
        <member name="M:SuperGMS.Tools.HttpHelper.SetCerList(SuperGMS.Tools.HttpItem)">
            <summary>
            设置多个证书
            </summary>
            <param name="objhttpItem"></param>
        </member>
        <member name="M:SuperGMS.Tools.HttpHelper.SetCookie(SuperGMS.Tools.HttpItem)">
            <summary>
            设置Cookie
            </summary>
            <param name="objhttpItem">Http参数</param>
        </member>
        <member name="M:SuperGMS.Tools.HttpHelper.SetPostData(SuperGMS.Tools.HttpItem)">
            <summary>
            设置Post数据
            </summary>
            <param name="objhttpItem">Http参数</param>
        </member>
        <member name="M:SuperGMS.Tools.HttpHelper.SetProxy(SuperGMS.Tools.HttpItem)">
            <summary>
            设置代理
            </summary>
            <param name="objhttpItem">参数对象</param>
        </member>
        <member name="M:SuperGMS.Tools.HttpHelper.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            回调验证证书问题
            </summary>
            <param name="sender">流对象</param>
            <param name="certificate">证书</param>
            <param name="chain">X509Chain</param>
            <param name="errors">SslPolicyErrors</param>
            <returns>bool</returns>
        </member>
        <member name="M:SuperGMS.Tools.HttpHelper.URLDecode(System.String,System.Text.Encoding)">
            <summary>
            根据指定的编码对RUl进行解码
            </summary>
            <param name="text">要解码的字符串</param>
            <param name="encoding">要进行解码的编码方式</param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Tools.HttpHelper.URLEncode(System.String,System.Text.Encoding)">
            <summary>
            根据指定的编码对URL进行编码
            </summary>
            <param name="text">要编码的URL</param>
            <param name="encoding">要进行编码的编码方式</param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.Tools.HttpItem">
            <summary>
            Http请求参考类
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.URL">
            <summary>
            请求URL必须填写
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.Method">
            <summary>
            请求方式默认为GET方式,当为POST方式时必须设置Postdata的值
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.Timeout">
            <summary>
            默认请求超时时间
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.ReadWriteTimeout">
            <summary>
            默认写入Post数据超时间
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.Accept">
            <summary>
            请求标头值 默认为text/html, application/xhtml+xml, */*
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.ContentType">
            <summary>
            请求返回类型默认 text/html
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.UserAgent">
            <summary>
            客户端访问信息默认Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.Encoding">
            <summary>
            返回数据编码默认为NUll,可以自动识别,一般为utf-8,gbk,gb2312
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.PostDataType">
            <summary>
            Post的数据类型
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.Postdata">
            <summary>
            Post请求时要发送的字符串Post数据
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.PostdataByte">
            <summary>
            Post请求时要发送的Byte类型的Post数据
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.Cookie">
            <summary>
            请求时的Cookie
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.Referer">
            <summary>
            来源地址，上次访问地址
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.CerPath">
            <summary>
            证书绝对路径
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.IsToLower">
            <summary>
            是否设置为全文小写，默认为不转化
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.Allowautoredirect">
            <summary>
            支持跳转页面，查询结果将是跳转后的页面，默认是不跳转
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.Connectionlimit">
            <summary>
            最大连接数
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.ProxyUserName">
            <summary>
            代理Proxy 服务器用户名
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.ProxyPwd">
            <summary>
            代理 服务器密码
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.ProxyIp">
            <summary>
            代理 服务IP
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.ResultType">
            <summary>
            设置返回类型String和Byte
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.Header">
            <summary>
            header对象
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.ProtocolVersion">
            <summary>
            获取或设置用于请求的 HTTP 版本。返回结果:用于请求的 HTTP 版本。默认为 System.Net.HttpVersion.Version11。
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.Expect100Continue">
            <summary>
             获取或设置一个 System.Boolean 值，该值确定是否使用 100-Continue 行为。如果 POST 请求需要 100-Continue 响应，则为 true；否则为 false。默认值为 true。
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.ClentCertificates">
            <summary>
            设置509证书集合
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.SecurityProtocolType">
            <summary>
            指定Schannel安全包支持的安全协议
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpItem.PostEncoding">
            <summary>
            设置或获取Post参数编码,默认的为Default编码
            </summary>
        </member>
        <member name="T:SuperGMS.Tools.HttpResult">
            <summary>
            Http返回参数类
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpResult.Cookie">
            <summary>
            Http请求返回的Cookie
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpResult.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpResult.Html">
            <summary>
            返回的String类型数据 只有ResultType.String时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpResult.ResultByte">
            <summary>
            返回的Byte数组 只有ResultType.Byte时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpResult.Header">
            <summary>
            header对象
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpResult.StatusDescription">
            <summary>
            返回状态说明
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.HttpResult.StatusCode">
            <summary>
            返回状态码,默认为OK
            </summary>
        </member>
        <member name="T:SuperGMS.Tools.ResultType">
            <summary>
            返回类型
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.ResultType.String">
            <summary>
            表示只返回字符串 只有Html有数据
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.ResultType.Byte">
            <summary>
            表示返回字符串和字节流 ResultByte和Html都有数据返回
            </summary>
        </member>
        <member name="T:SuperGMS.Tools.PostDataType">
            <summary>
            Post的数据格式默认为string
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.PostDataType.String">
            <summary>
            字符串类型，这时编码Encoding可不设置
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.PostDataType.Byte">
            <summary>
            Byte类型，需要设置PostdataByte参数的值编码Encoding可设置为空
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.PostDataType.FilePath">
            <summary>
            传文件，Postdata必须设置为文件的绝对路径，必须设置Encoding的值
            </summary>
        </member>
        <member name="T:SuperGMS.Tools.ReflectionTool">
            <summary>
            反射工具类
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.ReflectionTool.cacheConvertValue">
            <summary>
            缓存ConvertValue属性对象
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.ReflectionTool.lockObj">
            <summary>
            支持多线程
            </summary>
        </member>
        <member name="M:SuperGMS.Tools.ReflectionTool.GetPropertyValue(System.String,System.Object)">
            <summary>
            根据目标对象获取指定属性值
            </summary>
            <param name="propertyName"></param>
            <param name="targetObject"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Tools.ReflectionTool.GetPropertyFormatValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            根据目标对象获取指定属性值
            </summary>
            <param name="pi"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Tools.ReflectionTool.FormatNumberString(System.String,System.String,System.Int32)">
            <summary>
            返回格式化的数字字符串
            </summary>
            <param name="propName">字段名</param>
            <param name="propValue">字段值</param>
            <param name="decimals">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Tools.ReflectionTool.GetDisplayValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            如果属性中含有ConvertValueAttribute,将自动转换值
            </summary>
            <param name="pi"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Tools.ReflectionTool.GetCustomAttributeEx``1(System.Reflection.PropertyInfo)">
            <summary>
            获取属性标签的扩展方法,使用了缓存,提高效率
            支持多线程
            </summary>
            <typeparam name="T">标签</typeparam>
            <param name="pi">属性</param>
            <returns>标签</returns>
        </member>
        <member name="M:SuperGMS.Tools.ReflectionTool.GetCustomAttributeEx``1(System.Type)">
            <summary>
            获取类的自定义标签
            </summary>
            <typeparam name="T">标签</typeparam>
            <param name="type">类</param>
            <returns>标签</returns>
        </member>
        <member name="M:SuperGMS.Tools.ReflectionTool.GetPropertyInfosFromCache(System.Type)">
            <summary>
            根据类型获取BindingFlags.Public 和 BindingFlags.Instance 的属性
            去掉了缓存
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Tools.ReflectionTool.GetPropertyInfoFromCache(System.Type,System.String)">
            <summary>
            根据类型获取指定属性
            去掉了缓存
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Tools.ReflectionTool.GetMethodInfosFromCache(System.Type)">
            <summary>
            根据类型获取BindingFlags.InvokeMethod 或 BindingFlags.Public 的方法 
            去掉了缓存
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Tools.ReflectionTool.GetMethodInfoFromCache(System.Type,System.String)">
            <summary>
            根据类型获取BindingFlags.InvokeMethod 或 BindingFlags.Public 的方法 
             去掉了缓存
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.Tools.ReTryTools">
            <summary>
            ReTryTools
            </summary>
        </member>
        <member name="M:SuperGMS.Tools.ReTryTools.ReTry``2(System.Func{``0,``1},``0,System.Int32)">
            <summary>
            一个参数的方法重试
            </summary>
            <typeparam name="A1">参数类型</typeparam>
            <typeparam name="R">返回值类型</typeparam>
            <param name="fn">方法名</param>
            <param name="args1">参数</param>
            <param name="tryNum">重试次数，默认3次</param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Tools.ReTryTools.ReTry``1(System.Action{``0},``0,System.Int32)">
            <summary>
            无返回值得方法重试
            </summary>
            <typeparam name="A1"></typeparam>
            <param name="fn"></param>
            <param name="args1"></param>
            <param name="tryNum"></param>
        </member>
        <member name="T:SuperGMS.Tools.ServiceEnvironment">
            <summary>
            一个获取当前程序运行环境的辅助类
            </summary>
        </member>
        <member name="P:SuperGMS.Tools.ServiceEnvironment.WorkPath">
            <summary>进程运行路径</summary>
        </member>
        <member name="P:SuperGMS.Tools.ServiceEnvironment.ProcessId">
            <summary>进程Id</summary>
        </member>
        <member name="P:SuperGMS.Tools.ServiceEnvironment.ProcessInfo">
            <summary>进程消息</summary>
        </member>
        <member name="P:SuperGMS.Tools.ServiceEnvironment.ServiceName">
            <summary>服务名称</summary>
        </member>
        <member name="P:SuperGMS.Tools.ServiceEnvironment.ComputerName">
            <summary>计算机名称</summary>
        </member>
        <member name="P:SuperGMS.Tools.ServiceEnvironment.ComputerAddress">
            <summary>本机服务器地址, 自动获取</summary>
        </member>
        <member name="P:SuperGMS.Tools.ServiceEnvironment.EnvironmentInfo">
            <summary>
            完整的运行环境信息
            </summary>
        </member>
        <member name="M:SuperGMS.Tools.ServiceEnvironment.GetAppNamespace(System.Diagnostics.Process)">
            <summary>
            获取当前进程名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Tools.ServiceEnvironment.GetProcessUserName(System.Int32)">
            <summary>
            获取进程用户名, 因为可以通过应用程序池来区分
            </summary>
            <param name="pID">pId</param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.Tools.StringHelper">
            <summary>
            字符串辅助类
            </summary>
        </member>
        <member name="M:SuperGMS.Tools.StringHelper.Validate(SuperGMS.Tools.CharacterType,System.String)">
            <summary>
            根据字符类型返回表达式
            </summary>
            <param name="cType">字符类型</param>
            <param name="text">字符</param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.Tools.CharacterType">
            <summary>
            字符类型
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.CharacterType.Simple">
            <summary>
            请输入字母和数字
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.CharacterType.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.CharacterType.Code39">
            <summary>
            请输入字母数字短横线小数点
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.CharacterType.Code128">
            <summary>
            请输入字母数字短横线中文小数点括号
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.CharacterType.Complex">
            <summary>
            不能输入逗号
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.CharacterType.Email">
            <summary>
            邮箱
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.CharacterType.Mobile">
            <summary>
            手机号码
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.CharacterType.Period">
            <summary>
            时间段
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.CharacterType.PostCode">
            <summary>
            邮编
            </summary>
        </member>
        <member name="F:SuperGMS.Tools.CharacterType.PrimaryKey">
            <summary>
            主键限制：只能输入数字、字母、下划线、中横杠
            </summary>
        </member>
        <member name="T:SuperGMS.Tools.WebClientEx">
            <summary>
            WebClientEx
            </summary>
        </member>
        <member name="M:SuperGMS.Tools.WebClientEx.#ctor">
            <summary>
            无参构造，默认超时6s
            </summary>
        </member>
        <member name="M:SuperGMS.Tools.WebClientEx.#ctor(System.Int32)">
            <summary>
            需要传入超时时间
            </summary>
            <param name="timeOut"></param>
        </member>
        <member name="M:SuperGMS.Tools.WebClientEx.GetWebRequest(System.Uri)">
            <summary>
            重载
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:SuperGMS.UserSession.UserContext">
            <summary>
                用户上下文类，获取，设置，检查 用户信息
            </summary>
            <exception cref="T:SuperGMS.ExceptionEx.FrameworkException">用户未登录</exception>
        </member>
        <member name="P:SuperGMS.UserSession.UserContext.UserObject">
            <summary>
            用户自定义的上下文信息
            </summary>
        </member>
        <member name="M:SuperGMS.UserSession.UserContext.GetUserObject``1">
            <summary>
            获取用户自定义上下文
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:SuperGMS.UserSession.UserContext.UserInfo">
            <summary>
            登录用户信息
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.UserContext.Token">
            <summary>
                Gets or sets 用户登录后分配的Token
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.UserContext.ClientType">
            <summary>
              Gets or sets  客户端渠道类型Key
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.UserContext.ClientVersion">
            <summary>
              Gets or sets  客户端版本号
            </summary>
        </member>
        <member name="M:SuperGMS.UserSession.UserContext.HavRights(System.String)">
            <summary>
                判断当前用户有没有访问当前接口的权限
            </summary>
            <param name="funName">当前接口名称</param>
            <returns>是否有权限</returns>
        </member>
        <member name="M:SuperGMS.UserSession.UserContext.GetSysInfo">
            <summary>
            拉取用户的子系统权限，包含数据库信息
            </summary>
            <returns>用户子系统信息 </returns>
        </member>
        <member name="M:SuperGMS.UserSession.UserContext.GetRoleList">
            <summary>
                拉去用户的角色列表
            </summary>
            <returns>角色集合</returns>
        </member>
        <member name="M:SuperGMS.UserSession.UserContext.GetRoleFunctionList">
            <summary>
            功能按钮列表 ，这个量可能比较大，所以分开存
            </summary>
            <returns>角色权限</returns>
        </member>
        <member name="M:SuperGMS.UserSession.UserContext.GetRoleFunctionKey(System.String)">
            <summary>
            获取functionkey用于登录设置和获取function
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.UserSession.UserContext.GetRoleMenuKey(System.String)">
            <summary>
            获取Menukey用于登录设置和获取Menu
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.UserSession.UserContext.GetRoleMenuList">
            <summary>
            获取菜单列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.UserSession.UserContext.GetUserContext(System.String)">
            <summary>
                這個方法只能框架里用，外面看不到，框架的RpcContext通過此方法初始化UserContext
            </summary>
            <param name="token">token</param>
            <returns>用户上下文</returns>
        </member>
        <member name="T:SuperGMS.UserSession.FunctionInfo">
            <summary>
            功能列表信息
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.FunctionInfo.FunctionId">
            <summary>
            功能按钮Id
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.FunctionInfo.FunctionName">
            <summary>
            功能按钮菜单
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.FunctionInfo.ViewType">
            <summary>
            操作类型 List/add/update/del/view
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.FunctionInfo.SysId">
            <summary>
            系统Id
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.FunctionInfo.MenuId">
            <summary>
            菜单Id
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.FunctionInfo.ServiceName">
            <summary>
            微服务名称
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.FunctionInfo.ApiName">
            <summary>
            接口名称
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.FunctionInfo.SortNo">
            <summary>
            排序
            </summary>
        </member>
        <member name="T:SuperGMS.UserSession.Menu">
             <summary>
            
             <see cref="T:SuperGMS.UserSession.Menu" langword="" />
             </summary>
        </member>
        <member name="P:SuperGMS.UserSession.Menu.SysId">
            <summary>
            系统Id
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.Menu.MenuId">
            <summary>
            菜单Id
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.Menu.MenuName">
            <summary>
            菜单名称
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.Menu.ParentId">
            <summary>
            父菜单Id
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.Menu.SortNo">
            <summary>
            排序
            </summary>
        </member>
        <member name="T:SuperGMS.UserSession.Role">
            <summary>
            角色功能权限
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.Role.RoleId">
            <summary>
            角色Id
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.Role.RoleName">
            <summary>
            角色名称
            </summary>
        </member>
        <member name="T:SuperGMS.UserSession.UserLoginInfo.Rolefunction">
             <summary>
            
             <see cref="T:SuperGMS.UserSession.UserLoginInfo.Rolefunction" langword="" />
             </summary>
        </member>
        <member name="P:SuperGMS.UserSession.UserLoginInfo.Rolefunction.RoleId">
            <summary>
            角色Id
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.UserLoginInfo.Rolefunction.FunctionId">
            <summary>
            功能按钮列
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.UserLoginInfo.Rolefunction.MenuId">
            <summary>
            菜单Id
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.UserLoginInfo.Rolefunction.SysId">
            <summary>
            系统Id
            </summary>
        </member>
        <member name="T:SuperGMS.UserSession.SysDbInfo">
            <summary>
            租户数据库信息
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.SysDbInfo.SysID">
            <summary>
            Gets or sets 系统ID
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.SysDbInfo.DBUser">
            <summary>
            Gets or sets 数据库User
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.SysDbInfo.DBPwd">
            <summary>
            Gets or sets 数据库Pwd
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.SysDbInfo.DBName">
            <summary>
            Gets or sets 数据库Name
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.SysDbInfo.DBIP">
            <summary>
            Gets or sets 数据库地址
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.SysDbInfo.DBType">
            <summary>
            Gets or sets 数据库类型
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.SysDbInfo.DbModelName">
            <summary>
            Gets or sets 跟dbcontext对应数据库模型名称，用于获取dbcontext的连接信息
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.SysDbInfo.DbPort">
            <summary>
            Gets or sets 数据库端口号
            </summary>
        </member>
        <member name="T:SuperGMS.UserSession.SystemInfo">
             <summary>
            
             <see cref="T:SuperGMS.UserSession.SystemInfo" langword="" />
             </summary>
        </member>
        <member name="P:SuperGMS.UserSession.SystemInfo.SysId">
            <summary>
            系统Id
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.SystemInfo.SysName">
            <summary>
            系统名称
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.SystemInfo.ShowSysType">
            <summary>
            菜单显示在那种类型的终端上
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.SystemInfo.SortNo">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.SystemInfo.DefaultIcon">
            <summary>
            系统图片
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.SystemInfo.DefaultUrl">
            <summary>
            系统首页地址
            </summary>
        </member>
        <member name="T:SuperGMS.UserSession.TenantInfo">
             <summary>
            
             <see cref="T:SuperGMS.UserSession.TenantInfo" langword="" />
             </summary>
        </member>
        <member name="P:SuperGMS.UserSession.TenantInfo.TTID">
            <summary>
             Gets or sets   租户ID
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.TenantInfo.TenantName">
            <summary>
            租户名称
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.TenantInfo.StartTime">
            <summary>
            使用开始时间
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.TenantInfo.EndTime">
            <summary>
            截止时间
            </summary>
        </member>
        <member name="T:SuperGMS.UserSession.UserInfo">
             <summary>
            
             <see cref="T:SuperGMS.UserSession.UserInfo" langword="" />
             </summary>
        </member>
        <member name="P:SuperGMS.UserSession.UserInfo.UserId">
            <summary>
            登录用户Id
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.UserInfo.LoginName">
            <summary>
            登录名
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.UserInfo.TenantInfo">
            <summary>
            租户信息
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.UserInfo.SysDbInfos">
            <summary>
            租户的系统数据库信息
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.UserInfo.SystemInfos">
            <summary>
            租户系统信息
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.UserInfo.Roles">
            <summary>
            租户角色列表
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.UserInfo.Menus">
            <summary>
            租户用户菜单
            </summary>
        </member>
        <member name="P:SuperGMS.UserSession.UserInfo.FunctionInfos">
            <summary>
            租户功能按钮列表
            </summary>
        </member>
        <member name="T:SuperGMS.Zookeeper.BaseWatcher">
            <summary>
            BaseWatcher
            </summary>
        </member>
        <member name="T:SuperGMS.Zookeeper.ConfigWatcher">
            <summary>
            DataWatcher  监控数据节点变化，全部都是永久性节点，不存在动态增加和删除的功能，所以这里只关注Changed的节点
            </summary>
        </member>
        <member name="M:SuperGMS.Zookeeper.ConfigWatcher.process(org.apache.zookeeper.WatchedEvent)">
            <summary>
            process
            </summary>
            <param name="event">event</param>
            <returns>Task</returns>
        </member>
        <member name="T:SuperGMS.Zookeeper.NullWatcher">
            <summary>
            NullWatcher
            </summary>
        </member>
        <member name="M:SuperGMS.Zookeeper.NullWatcher.process(org.apache.zookeeper.WatchedEvent)">
            <inheritdoc/>
        </member>
        <member name="T:SuperGMS.Zookeeper.ServiceRouterWatcher">
            <summary>
            ServiceRouterWatcher
            </summary>
        </member>
        <member name="T:SuperGMS.Zookeeper.ZKConnectionWatcher">
            <summary>
            ZKConnectionWatcher
            </summary>
        </member>
        <member name="T:SuperGMS.Zookeeper.ZookeeperManager">
            <summary>
            GrantZookeeper
            </summary>
        </member>
        <member name="M:SuperGMS.Zookeeper.ZookeeperManager.Initlize(System.String,System.Int32,org.apache.zookeeper.Watcher)">
            <summary>
            初始化的一个zk，一个微服务只会连一个zk
            </summary>
            <param name="connectionString">connectionString</param>
            <param name="sessionTimeout">sessionTimeout</param>
            <param name="watcher">监控连接的watcher</param>
        </member>
        <member name="M:SuperGMS.Zookeeper.ZookeeperManager.GetChildrenNode(System.String,org.apache.zookeeper.Watcher)">
            <summary>
            获取子节点列表
            </summary>
            <param name="path">路径</param>
            <param name="watcher">监听的watcher</param>
            <returns>返回节点列表</returns>
        </member>
        <member name="M:SuperGMS.Zookeeper.ZookeeperManager.Delete(System.String)">
            <summary>
            删除节点，只有永久节点需要删除
            </summary>
            <param name="path">要删除的节点</param>
        </member>
        <member name="M:SuperGMS.Zookeeper.ZookeeperManager.SetConfig(System.String,System.String)">
            <summary>
            设置或者修改配置信息，一般指静态配置
            </summary>
            <param name="serverName">服务名</param>
            <param name="xmlConfig">注意数据是xml格式</param>
        </member>
        <member name="M:SuperGMS.Zookeeper.ZookeeperManager.GetConfig(System.String,org.apache.zookeeper.Watcher)">
            <summary>
            获取微服务配置，根据微服务获取，这里可能会重建路径，注意区分GetWatcherBackConfig
            </summary>
            <param name="serverName">微服务serverName</param>
            <param name="watcher">回调方法watcher</param>
            <returns>配置内容</returns>
        </member>
        <member name="M:SuperGMS.Zookeeper.ZookeeperManager.SetRouter(System.String,System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>
            设置路由，一般都是服务启动之后会自动注册
            </summary>
            <param name="serverName">服务名称</param>
            <param name="data">数据</param>
        </member>
        <member name="M:SuperGMS.Zookeeper.ZookeeperManager.SetRelation(System.String,System.String)">
            <summary>
            设置调用关系
            </summary>
            <param name="relationServerName"></param>
            <param name="myServerName"></param>
            <returns></returns>
        </member>
        <member name="M:SuperGMS.Zookeeper.ZookeeperManager.ClearRouter(System.String,System.String)">
            <summary>
            清除路由，清理连接
            </summary>
            <param name="serverName">serverName</param>
            <param name="router">router</param>
        </member>
        <member name="M:SuperGMS.Zookeeper.ZookeeperManager.GetNodeData(System.String,org.apache.zookeeper.Watcher)">
            <summary>
            获取path的数据
            </summary>
            <param name="path">路径</param>
            <param name="watcher">监听path节点的watcher</param>
            <returns>返回数据</returns>
        </member>
        <member name="M:SuperGMS.Zookeeper.ZookeeperManager.SetNodeData(System.String,System.String)">
            <summary>
            设置节点数据
            </summary>
            <param name="path">path</param>
            <param name="data">data</param>
            <returns>返回是否成功</returns>
        </member>
        <member name="M:SuperGMS.Zookeeper.ZookeeperManager.CreatePersistent(System.String,System.String)">
            <summary>
            创建永久性节点
            </summary>
            <param name="path">节点路径</param>
            <param name="data">节点数据</param>
        </member>
        <member name="M:SuperGMS.Zookeeper.ZookeeperManager.CreateEphemeral(System.String,System.String)">
            <summary>
            创建一个临时节点，客户端掉线，节点将被删除
            </summary>
            <param name="path">path</param>
            <param name="data">data</param>
        </member>
    </members>
</doc>
